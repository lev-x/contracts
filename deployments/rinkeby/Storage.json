{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "_verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x5b8C253517b6Bd003369173109693B01cb6841B5",
    "contractAddress": null,
    "transactionIndex": 8,
    "gasUsed": "1390396",
    "logsBloom": "0x
    "blockHash": "0x0e4c5e87215a399877928c9ba4988817f8a2c6c4cdf49e0eb3cffe08faf266d3",
    "transactionHash": "0x9fc92d41ac0366d0565efdc19ea93645c0e010bd7898fece4c73ca1577339131",
    "logs": [],
    "blockNumber": 7136679,
    "cumulativeGasUsed": "1664498",
    "status": 1,
    "byzantium": true
  },
  "address": "0xb42169667957e5517740b7f64ab140ac857f959b",
  "args": [],
  "solcInputHash": "0x0ba34002262c75f24ebbcd47c2a71ec7f5830be3e50c097a446a7d66537a7b5a",
  "metadata": "{\"compiler\":{\"version\":\"0.6.8+commit.0bbfe453\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"_verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{\"cumulativeSpendingInUSD(Storage.Data storage,uint256)\":{\"notice\":\"Cumulative value spent in USD after 'fromTimestamp' g\"},\"lastExecutionTime(Storage.Data storage,bytes4)\":{\"notice\":\"Last executed timestamp that the method of 'selector' called\"},\"minimumTransferLimitInUSD(Storage.Data storage)\":{\"notice\":\"How much an owner can spend with 0 witness     * For each signature of a witness is offered, limit is multiplied by 10\"},\"owner(Storage.Data storage)\":{\"notice\":\"The owner\"},\"transferCapacityInUSD(Storage.Data storage,uint256)\":{\"notice\":\"Transfer capacity available in USD     * 10**18 = 1 USD\"},\"witnessNames(Storage.Data storage,address)\":{\"notice\":\"Witness names for their addresses\"},\"witnesses(Storage.Data storage,uint256)\":{\"notice\":\"Witness addresses\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/wallet/libraries/Storage.sol\":\"Storage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0x1efcb1ccef6b3bce65467c4b704cec8d0582e35ff48352269ba8cda4b54ae3da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdfb4f812600ba4ce6738c35584ceb8c9433472583051b48ba5b1f66cb758a498\",\"license\":\"MIT\"},\"contracts/wallet/libraries/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary Storage {\\n    using ECDSA for bytes32;\\n    using Address for address;\\n\\n    uint256 private constant MINIMUM_TRANSFER_LIMIT_IN_USD = 10**20; // 100 USD\\n    uint256 private constant TRANSFER_CAPACITY_RESET_PERIOD = 24 hours;\\n\\n    struct Signatures {\\n        bytes owner;\\n        bytes[] witnesses;\\n    }\\n\\n    struct SigningRequirements {\\n        bool owner;\\n        uint256 witnesses;\\n    }\\n\\n    struct SecurityPeriod {\\n        uint256 time;\\n        bytes4[] dependencies;\\n    }\\n\\n    struct Spending {\\n        uint256 valueInUSD;\\n        uint256 timestamp;\\n    }\\n\\n    struct Data {\\n        uint256 _nonce;\\n        mapping(bytes4 => SigningRequirements) _signingRequirements;\\n        mapping(bytes4 => SecurityPeriod) _securityPeriods;\\n        mapping(bytes4 => uint256) _lastExecutionTime;\\n        bytes32 _label;\\n        address _owner;\\n        mapping(address => bytes32) _witnessNames;\\n        address[] _witnesses;\\n        bool _locked;\\n        Spending[] _spending;\\n    }\\n\\n    function label(Data storage self) public view returns (bytes32) {\\n        return self._label;\\n    }\\n\\n    function setLabel(Data storage self, bytes32 label_) public {\\n        self._label = label_;\\n    }\\n\\n    function nonce(Data storage self) public view returns (uint256) {\\n        return self._nonce;\\n    }\\n\\n    function incrementNonce(Data storage self) public {\\n        self._nonce += 1;\\n    }\\n\\n    function signingRequirements(Data storage self, bytes4 methodId)\\n        public\\n        view\\n        returns (SigningRequirements storage)\\n    {\\n        return self._signingRequirements[methodId];\\n    }\\n\\n    function setSigningRequirements(\\n        Data storage self,\\n        bytes4 methodId,\\n        bool ownerRequired,\\n        uint256 witnessesRequired\\n    ) public {\\n        self._signingRequirements[methodId].owner = ownerRequired;\\n        self._signingRequirements[methodId].witnesses = witnessesRequired;\\n    }\\n\\n    function securityPeriod(Data storage self, bytes4 methodId)\\n        public\\n        view\\n        returns (SecurityPeriod storage)\\n    {\\n        return self._securityPeriods[methodId];\\n    }\\n\\n    function setSecurityPeriod(\\n        Data storage self,\\n        bytes4 methodId,\\n        uint256 time,\\n        bytes4[] memory dependencies\\n    ) public {\\n        self._securityPeriods[methodId].time = time;\\n        self._securityPeriods[methodId].dependencies = dependencies;\\n    }\\n\\n    /**\\n     * @notice Last executed timestamp that the method of 'selector' called\\n     */\\n    function lastExecutionTime(Data storage self, bytes4 selector) public view returns (uint256) {\\n        return self._lastExecutionTime[selector];\\n    }\\n\\n    function updateLastExecutionTime(Data storage self, bytes4 selector) public {\\n        self._lastExecutionTime[selector] = now;\\n    }\\n\\n    /**\\n     * @notice The owner\\n     */\\n    function owner(Data storage self) public view returns (address) {\\n        return self._owner;\\n    }\\n\\n    function transferOwnership(Data storage self, address newOwner) public {\\n        require(newOwner != address(0), \\\"invalid-owner\\\");\\n        require(newOwner != address(this), \\\"wallet-cannot-be-owner\\\");\\n        require(self._witnessNames[newOwner] == bytes32(0), \\\"witness-cannot-be-owner\\\");\\n        address previousOwner = self._owner;\\n        require(previousOwner != newOwner, \\\"already-owner\\\");\\n        self._owner = newOwner;\\n    }\\n\\n    /**\\n     * @notice Witness names for their addresses\\n     */\\n    function witnessNames(Data storage self, address addr) public view returns (bytes32) {\\n        return self._witnessNames[addr];\\n    }\\n\\n    /**\\n     * @notice Witness addresses\\n     */\\n    function witnesses(Data storage self, uint256 index) public view returns (address) {\\n        return self._witnesses[index];\\n    }\\n\\n    function numberOfWitnesses(Data storage self) public view returns (uint256) {\\n        return self._witnesses.length;\\n    }\\n\\n    function addWitness(\\n        Data storage self,\\n        address addr,\\n        bytes32 name\\n    ) public {\\n        require(addr != address(0), \\\"invalid-address\\\");\\n        require(name != bytes32(0), \\\"invalid-name\\\");\\n        require(addr != address(this), \\\"cannot-add-wallet\\\");\\n        require(self._owner != addr, \\\"cannot-add-owner\\\");\\n        require(self._witnessNames[addr] == bytes32(0), \\\"witness-exists\\\");\\n\\n        self._witnessNames[addr] = name;\\n        self._witnesses.push(addr);\\n    }\\n\\n    function removeWitness(Data storage self, address addr) public {\\n        require(addr != address(0), \\\"invalid-address\\\");\\n        require(self._witnesses.length > 1, \\\"at-least-one-witness-required\\\");\\n        require(self._witnessNames[addr] != bytes32(0), \\\"not-witness\\\");\\n\\n        delete self._witnessNames[addr];\\n        for (uint256 i = 0; i < self._witnesses.length; i++) {\\n            if (self._witnesses[i] == addr) {\\n                self._witnesses[i] = self._witnesses[self._witnesses.length - 1];\\n                self._witnesses.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function locked(Data storage self) public view returns (bool) {\\n        return self._locked;\\n    }\\n\\n    function setLocked(Data storage self, bool newLocked) public {\\n        self._locked = newLocked;\\n    }\\n\\n    /**\\n     * @notice How much an owner can spend with 0 witness\\n     *\\n     * For each signature of a witness is offered, limit is multiplied by 10\\n     */\\n    function minimumTransferLimitInUSD(Data storage) public pure returns (uint256) {\\n        return MINIMUM_TRANSFER_LIMIT_IN_USD;\\n    }\\n\\n    function transferCapacityResetPeriod(Data storage) public pure returns (uint256) {\\n        return TRANSFER_CAPACITY_RESET_PERIOD;\\n    }\\n\\n    /**\\n     * @notice Transfer capacity available in USD\\n     *\\n     * 10**18 = 1 USD\\n     */\\n    function transferCapacityInUSD(Data storage self, uint256 numberOfWitnessSignatures)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 limitInUSD = MINIMUM_TRANSFER_LIMIT_IN_USD * (10**numberOfWitnessSignatures);\\n        uint256 spendingInUSD = cumulativeSpendingInUSD(self, now - TRANSFER_CAPACITY_RESET_PERIOD);\\n        return limitInUSD > spendingInUSD ? limitInUSD - spendingInUSD : 0;\\n    }\\n\\n    /**\\n     * @notice Cumulative value spent in USD after 'fromTimestamp'\\n     g\\n     */\\n    function cumulativeSpendingInUSD(Data storage self, uint256 fromTimestamp)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 spending = 0;\\n        if (self._spending.length > 0) {\\n            for (uint256 i = self._spending.length; i > 0; i--) {\\n                Spending storage spent = self._spending[i - 1];\\n                if (spent.timestamp < fromTimestamp) {\\n                    break;\\n                }\\n                spending += spent.valueInUSD;\\n            }\\n        }\\n        return spending;\\n    }\\n\\n    function addSpending(Data storage self, uint256 valueInUSD) public {\\n        Spending storage spent = self._spending.push();\\n        spent.valueInUSD = valueInUSD;\\n        spent.timestamp = now;\\n    }\\n\\n    function isValidOwnerSignature(\\n        Data storage self,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) public view returns (bool) {\\n        return _verify(hash, self._owner, signature);\\n    }\\n\\n    function areValidWitnessSignatures(\\n        Data storage self,\\n        bytes32 hash,\\n        bytes[] memory signatures\\n    ) public view returns (bool) {\\n        if (_duplicate(signatures)) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < signatures.length; i++) {\\n            bytes memory signature = signatures[i];\\n            bool valid = false;\\n            for (uint256 j = 0; j < self._witnesses.length; j++) {\\n                if (_verify(hash, self._witnesses[j], signature)) {\\n                    valid = true;\\n                    break;\\n                }\\n            }\\n            if (!valid) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @return true if array has duplicate items, false otherwise\\n     */\\n    function _duplicate(bytes[] memory array) private pure returns (bool) {\\n        bytes32[] memory hashes = new bytes32[](array.length);\\n        for (uint256 i = 0; i < array.length; i++) {\\n            hashes[i] = keccak256(array[i]);\\n        }\\n        for (uint256 i = 0; i < hashes.length; i++) {\\n            for (uint256 j = i + 1; j < hashes.length; j++) {\\n                if (hashes[i] == hashes[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _verify(\\n        bytes32 hash,\\n        address signer,\\n        bytes memory signature\\n    ) public view returns (bool) {\\n        if (signer.isContract()) {\\n            // Consider the signer as an EIP-1271 compatible contract\\n            // bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\")) = 0x1626ba7e\\n            bytes4 magicValue = 0x1626ba7e;\\n            (bool success, bytes memory data) = signer.staticcall(abi.encodePacked(magicValue));\\n            if (success) {\\n                bytes4 returned = abi.decode(data, (bytes4));\\n                return magicValue == returned;\\n            } else {\\n                return false;\\n            }\\n        } else {\\n            // Try EIP-712\\n            bool v = signer == hash.recover(signature);\\n            if (v) {\\n                return true;\\n            } else {\\n                // Consider signed by web3.eth_sign\\n                hash = hash.toEthSignedMessageHash();\\n                return signer == hash.recover(signature);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x39e3e977fcb31db7cb2c525f798f0628778c593fcb71dd48a9417ddd08a56c21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x611822610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101b35760003560e01c8063998c8bbb11610103578063d124bb84116100a1578063e686be841161007b578063e686be8414610407578063eced5d691461041a578063f44730801461043a578063fca77a501461045a576101b3565b8063d124bb84146103c1578063d3dcb445146103d4578063d51b48b1146103f4576101b3565b8063ac703f5e116100dd578063ac703f5e1461035b578063c2fc97ce1461036e578063ca3f597214610381578063ce2a9901146103a1576101b3565b8063998c8bbb14610315578063a650d0e814610328578063a92e972c14610348576101b3565b8063368b6ad21161017057806377cc93ed1161014a57806377cc93ed146102af57806382f37839146102cf57806382fa4184146102ef57806397e4e8ba14610302576101b3565b8063368b6ad21461025c57806344fd6df61461027c578063589775981461029c576101b3565b80630668a84f146101b85780630c18a8b1146101da578063180ded581461020357806318d28ee9146102165780631f7c8c75146102295780631f9d0c3e1461023c575b600080fd5b8180156101c457600080fd5b506101d86101d3366004611191565b61046d565b005b6101ed6101e8366004611118565b610484565b6040516101fa9190611488565b60405180910390f35b6101ed6102113660046111c0565b61048e565b6101ed610224366004611130565b6104d0565b6101ed610237366004611118565b6104ef565b81801561024857600080fd5b506101d8610257366004611130565b6104f3565b81801561026857600080fd5b506101d86102773660046111c0565b6105db565b81801561028857600080fd5b506101d86102973660046112be565b610602565b6101ed6102aa366004611118565b610622565b6102c26102bd366004611118565b610629565b6040516101fa9190611469565b8180156102db57600080fd5b506101d86102ea366004611118565b610639565b6101ed6102fd366004611118565b610642565b6101ed6103103660046111c0565b610650565b6101ed610323366004611118565b6106b9565b61033b610336366004611286565b6106c0565b6040516101fa919061147d565b61033b61035636600461109a565b6106e5565b6101ed6103693660046112be565b61083c565b6101ed61037c3660046112be565b61085b565b81801561038d57600080fd5b506101d861039c366004611130565b61087b565b8180156103ad57600080fd5b506101d86103bc36600461115c565b610a05565b61033b6103cf366004611118565b610b22565b8180156103e057600080fd5b506101d86103ef366004611329565b610b2c565b6101ed6104023660046112be565b610b68565b61033b6104153660046111e1565b610b87565b81801561042657600080fd5b506101d86104353660046112e2565b610c41565b81801561044657600080fd5b506101d86104553660046111c0565b610c74565b6102c26104683660046111c0565b610c7c565b600891909101805460ff1916911515919091179055565b620151805b919050565b600068056bc75e2d63100000600a83900a02816104b1856201517f194201610650565b90508082116104c15760006104c5565b8082035b925050505b92915050565b6001600160a01b03166000908152600691909101602052604090205490565b5490565b6001600160a01b0381166105225760405162461bcd60e51b81526004016105199061156f565b60405180910390fd5b6001600160a01b03811630141561054b5760405162461bcd60e51b81526004016105199061169f565b6001600160a01b0381166000908152600683016020526040902054156105835760405162461bcd60e51b815260040161051990611643565b60058201546001600160a01b039081169082168114156105b55760405162461bcd60e51b815260040161051990611548565b5060059190910180546001600160a01b0319166001600160a01b03909216919091179055565b60099091018054600181810183556000928352602090922060029091020191825542910155565b6001600160e01b0319166000908152600390910160205260409020429055565b6007015490565b600501546001600160a01b031690565b80546001019055565b5068056bc75e2d6310000090565b60098201546000908190156106b25760098401545b80156106b057600085600901600183038154811061067f57fe5b9060005260206000209060020201905084816001015410156106a157506106b0565b54919091019060001901610665565b505b9392505050565b6004015490565b60058301546000906106dd9084906001600160a01b0316846106e5565b949350505050565b60006106f9836001600160a01b0316610ca9565b156107cd57604051630b135d3f60e11b906000906060906001600160a01b038716906107299085906020016113ea565b60408051601f1981840301815290829052610743916113ff565b600060405180830381855afa9150503d806000811461077e576040519150601f19603f3d011682016040523d82523d6000602084013e610783565b606091505b509150915081156107c1576000818060200190518101906107a491906110fc565b6001600160e01b031994851694169390931493506106b292505050565b600093505050506106b2565b60006107df858463ffffffff610ce216565b6001600160a01b0316846001600160a01b031614905080156108055760019150506106b2565b61080e85610e10565b9450610820858463ffffffff610ce216565b6001600160a01b0316846001600160a01b0316149150506106b2565b6001600160e01b03191660009081526001919091016020526040902090565b6001600160e01b0319166000908152600391909101602052604090205490565b6001600160a01b0381166108a15760405162461bcd60e51b8152600401610519906115d8565b60078201546001106108c55760405162461bcd60e51b81526004016105199061171f565b6001600160a01b03811660009081526006830160205260409020546108fc5760405162461bcd60e51b81526004016105199061167a565b6001600160a01b038116600090815260068301602052604081208190555b6007830154811015610a0057816001600160a01b031683600701828154811061093f57fe5b6000918252602090912001546001600160a01b031614156109f857600783018054600019810190811061096e57fe5b6000918252602090912001546007840180546001600160a01b03909216918390811061099657fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826007018054806109d157fe5b600082815260209020810160001990810180546001600160a01b0319169055019055610a00565b60010161091a565b505050565b6001600160a01b038216610a2b5760405162461bcd60e51b8152600401610519906115d8565b80610a485760405162461bcd60e51b8152600401610519906116f9565b6001600160a01b038216301415610a715760405162461bcd60e51b81526004016105199061151d565b60058301546001600160a01b0383811691161415610aa15760405162461bcd60e51b8152600401610519906116cf565b6001600160a01b038216600090815260068401602052604090205415610ad95760405162461bcd60e51b815260040161051990611756565b6001600160a01b039091166000818152600684016020908152604082209390935560079093018054600181018255908452919092200180546001600160a01b0319169091179055565b6008015460ff1690565b6001600160e01b03198316600090815260028501602090815260409091208381558251610b6192600190920191840190610f3f565b5050505050565b6001600160e01b03191660009081526002919091016020526040902090565b6000610b9282610e40565b15610b9f575060006106b2565b60005b8251811015610c36576060838281518110610bb957fe5b602090810291909101015190506000805b6007880154811015610c1a57610c0487896007018381548110610be957fe5b6000918252602090912001546001600160a01b0316856106e5565b15610c125760019150610c1a565b600101610bca565b5080610c2c57600093505050506106b2565b5050600101610ba2565b506001949350505050565b6001600160e01b0319929092166000908152600193840160205260409020805460ff191691151591909117815590910155565b600490910155565b6000826007018281548110610c8d57fe5b6000918252602090912001546001600160a01b03169392505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906106dd575050151592915050565b60008151604114610d055760405162461bcd60e51b8152600401610519906114e6565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115610d575760405162461bcd60e51b815260040161051990611596565b8060ff16601b14158015610d6f57508060ff16601c14155b15610d8c5760405162461bcd60e51b815260040161051990611601565b600060018783868660405160008152602001604052604051610db19493929190611491565b6020604051602081039080840390855afa158015610dd3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610e065760405162461bcd60e51b8152600401610519906114af565b9695505050505050565b600081604051602001610e239190611438565b604051602081830303815290604052805190602001209050919050565b60006060825167ffffffffffffffff81118015610e5c57600080fd5b50604051908082528060200260200182016040528015610e86578160200160208202803683370190505b50905060005b8351811015610ecf57838181518110610ea157fe5b602002602001015180519060200120828281518110610ebc57fe5b6020908102919091010152600101610e8c565b5060005b8151811015610f3557600181015b8251811015610f2c57828181518110610ef657fe5b6020026020010151838381518110610f0a57fe5b60200260200101511415610f245760019350505050610489565b600101610ee1565b50600101610ed3565b5060009392505050565b82805482825590600052602060002090600701600890048101928215610fdb5791602002820160005b83821115610fa957835183826101000a81548163ffffffff021916908360e01c02179055509260200192600401602081600301049283019260010302610f68565b8015610fd95782816101000a81549063ffffffff0219169055600401602081600301049283019260010302610fa9565b505b50610fe7929150610feb565b5090565b61100c91905b80821115610fe757805463ffffffff19168155600101610ff1565b90565b80356001600160a01b03811681146104ca57600080fd5b80356104ca816117d6565b600082601f830112611041578081fd5b813567ffffffffffffffff811115611057578182fd5b61106a601f8201601f191660200161177e565b915080825283602082850101111561108157600080fd5b8060208401602084013760009082016020015292915050565b6000806000606084860312156110ae578283fd5b8335925060208401356001600160a01b03811681146110cb578283fd5b9150604084013567ffffffffffffffff8111156110e6578182fd5b6110f286828701611031565b9150509250925092565b60006020828403121561110d578081fd5b81516106b2816117d6565b600060208284031215611129578081fd5b5035919050565b60008060408385031215611142578182fd5b82359150611153846020850161100f565b90509250929050565b600080600060608486031215611170578283fd5b83359250611181856020860161100f565b9150604084013590509250925092565b600080604083850312156111a3578182fd5b8235915060208301356111b5816117c5565b809150509250929050565b600080604083850312156111d2578182fd5b50508035926020909101359150565b6000806000606084860312156111f5578283fd5b833592506020808501359250604085013567ffffffffffffffff81111561121a578283fd5b80860187601f82011261122b578384fd5b8035915061124061123b836117a5565b61177e565b82815283810190828501865b85811015611275576112638c888435880101611031565b8452928601929086019060010161124c565b505080955050505050509250925092565b60008060006060848603121561129a578283fd5b8335925060208401359150604084013567ffffffffffffffff8111156110e6578182fd5b600080604083850312156112d0578182fd5b8235915060208301356111b5816117d6565b600080600080608085870312156112f7578081fd5b843593506020850135611309816117d6565b92506040850135611319816117c5565b9396929550929360600135925050565b6000806000806080858703121561133e578182fd5b84359350602080860135611351816117d6565b935060408601359250606086013567ffffffffffffffff811115611373578283fd5b80870188601f820112611384578384fd5b8035915061139461123b836117a5565b82815283810190828501858502840186018c10156113b0578687fd5b8693505b848410156113da576113c68c82611026565b8352600193909301929185019185016113b4565b50979a9699509497505050505050565b6001600160e01b031991909116815260040190565b60008251815b8181101561141f5760208186018101518583015201611405565b8181111561142d5782828501525b509190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b93845260ff9290921660208401526040830152606082015260800190565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526011908201527018d85b9b9bdd0b5859190b5dd85b1b195d607a1b604082015260600190565b6020808252600d908201526c30b63932b0b23c96b7bbb732b960991b604082015260600190565b6020808252600d908201526c34b73b30b634b216b7bbb732b960991b604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252600f908201526e696e76616c69642d6164647265737360881b604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526017908201527f7769746e6573732d63616e6e6f742d62652d6f776e6572000000000000000000604082015260600190565b6020808252600b908201526a6e6f742d7769746e65737360a81b604082015260600190565b6020808252601690820152753bb0b63632ba16b1b0b73737ba16b13296b7bbb732b960511b604082015260600190565b60208082526010908201526f31b0b73737ba16b0b23216b7bbb732b960811b604082015260600190565b6020808252600c908201526b696e76616c69642d6e616d6560a01b604082015260600190565b6020808252601d908201527f61742d6c656173742d6f6e652d7769746e6573732d7265717569726564000000604082015260600190565b6020808252600e908201526d7769746e6573732d65786973747360901b604082015260600190565b60405181810167ffffffffffffffff8111828210171561179d57600080fd5b604052919050565b600067ffffffffffffffff8211156117bb578081fd5b5060209081020190565b80151581146117d357600080fd5b50565b6001600160e01b0319811681146117d357600080fdfea2646970667358221220af5901ff7fe7ceb6d4e7011fb1f59a0ae8f389d481a48b11d5783dcd54a88d7c64736f6c63430006080033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101b35760003560e01c8063998c8bbb11610103578063d124bb84116100a1578063e686be841161007b578063e686be8414610407578063eced5d691461041a578063f44730801461043a578063fca77a501461045a576101b3565b8063d124bb84146103c1578063d3dcb445146103d4578063d51b48b1146103f4576101b3565b8063ac703f5e116100dd578063ac703f5e1461035b578063c2fc97ce1461036e578063ca3f597214610381578063ce2a9901146103a1576101b3565b8063998c8bbb14610315578063a650d0e814610328578063a92e972c14610348576101b3565b8063368b6ad21161017057806377cc93ed1161014a57806377cc93ed146102af57806382f37839146102cf57806382fa4184146102ef57806397e4e8ba14610302576101b3565b8063368b6ad21461025c57806344fd6df61461027c578063589775981461029c576101b3565b80630668a84f146101b85780630c18a8b1146101da578063180ded581461020357806318d28ee9146102165780631f7c8c75146102295780631f9d0c3e1461023c575b600080fd5b8180156101c457600080fd5b506101d86101d3366004611191565b61046d565b005b6101ed6101e8366004611118565b610484565b6040516101fa9190611488565b60405180910390f35b6101ed6102113660046111c0565b61048e565b6101ed610224366004611130565b6104d0565b6101ed610237366004611118565b6104ef565b81801561024857600080fd5b506101d8610257366004611130565b6104f3565b81801561026857600080fd5b506101d86102773660046111c0565b6105db565b81801561028857600080fd5b506101d86102973660046112be565b610602565b6101ed6102aa366004611118565b610622565b6102c26102bd366004611118565b610629565b6040516101fa9190611469565b8180156102db57600080fd5b506101d86102ea366004611118565b610639565b6101ed6102fd366004611118565b610642565b6101ed6103103660046111c0565b610650565b6101ed610323366004611118565b6106b9565b61033b610336366004611286565b6106c0565b6040516101fa919061147d565b61033b61035636600461109a565b6106e5565b6101ed6103693660046112be565b61083c565b6101ed61037c3660046112be565b61085b565b81801561038d57600080fd5b506101d861039c366004611130565b61087b565b8180156103ad57600080fd5b506101d86103bc36600461115c565b610a05565b61033b6103cf366004611118565b610b22565b8180156103e057600080fd5b506101d86103ef366004611329565b610b2c565b6101ed6104023660046112be565b610b68565b61033b6104153660046111e1565b610b87565b81801561042657600080fd5b506101d86104353660046112e2565b610c41565b81801561044657600080fd5b506101d86104553660046111c0565b610c74565b6102c26104683660046111c0565b610c7c565b600891909101805460ff1916911515919091179055565b620151805b919050565b600068056bc75e2d63100000600a83900a02816104b1856201517f194201610650565b90508082116104c15760006104c5565b8082035b925050505b92915050565b6001600160a01b03166000908152600691909101602052604090205490565b5490565b6001600160a01b0381166105225760405162461bcd60e51b81526004016105199061156f565b60405180910390fd5b6001600160a01b03811630141561054b5760405162461bcd60e51b81526004016105199061169f565b6001600160a01b0381166000908152600683016020526040902054156105835760405162461bcd60e51b815260040161051990611643565b60058201546001600160a01b039081169082168114156105b55760405162461bcd60e51b815260040161051990611548565b5060059190910180546001600160a01b0319166001600160a01b03909216919091179055565b60099091018054600181810183556000928352602090922060029091020191825542910155565b6001600160e01b0319166000908152600390910160205260409020429055565b6007015490565b600501546001600160a01b031690565b80546001019055565b5068056bc75e2d6310000090565b60098201546000908190156106b25760098401545b80156106b057600085600901600183038154811061067f57fe5b9060005260206000209060020201905084816001015410156106a157506106b0565b54919091019060001901610665565b505b9392505050565b6004015490565b60058301546000906106dd9084906001600160a01b0316846106e5565b949350505050565b60006106f9836001600160a01b0316610ca9565b156107cd57604051630b135d3f60e11b906000906060906001600160a01b038716906107299085906020016113ea565b60408051601f1981840301815290829052610743916113ff565b600060405180830381855afa9150503d806000811461077e576040519150601f19603f3d011682016040523d82523d6000602084013e610783565b606091505b509150915081156107c1576000818060200190518101906107a491906110fc565b6001600160e01b031994851694169390931493506106b292505050565b600093505050506106b2565b60006107df858463ffffffff610ce216565b6001600160a01b0316846001600160a01b031614905080156108055760019150506106b2565b61080e85610e10565b9450610820858463ffffffff610ce216565b6001600160a01b0316846001600160a01b0316149150506106b2565b6001600160e01b03191660009081526001919091016020526040902090565b6001600160e01b0319166000908152600391909101602052604090205490565b6001600160a01b0381166108a15760405162461bcd60e51b8152600401610519906115d8565b60078201546001106108c55760405162461bcd60e51b81526004016105199061171f565b6001600160a01b03811660009081526006830160205260409020546108fc5760405162461bcd60e51b81526004016105199061167a565b6001600160a01b038116600090815260068301602052604081208190555b6007830154811015610a0057816001600160a01b031683600701828154811061093f57fe5b6000918252602090912001546001600160a01b031614156109f857600783018054600019810190811061096e57fe5b6000918252602090912001546007840180546001600160a01b03909216918390811061099657fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826007018054806109d157fe5b600082815260209020810160001990810180546001600160a01b0319169055019055610a00565b60010161091a565b505050565b6001600160a01b038216610a2b5760405162461bcd60e51b8152600401610519906115d8565b80610a485760405162461bcd60e51b8152600401610519906116f9565b6001600160a01b038216301415610a715760405162461bcd60e51b81526004016105199061151d565b60058301546001600160a01b0383811691161415610aa15760405162461bcd60e51b8152600401610519906116cf565b6001600160a01b038216600090815260068401602052604090205415610ad95760405162461bcd60e51b815260040161051990611756565b6001600160a01b039091166000818152600684016020908152604082209390935560079093018054600181018255908452919092200180546001600160a01b0319169091179055565b6008015460ff1690565b6001600160e01b03198316600090815260028501602090815260409091208381558251610b6192600190920191840190610f3f565b5050505050565b6001600160e01b03191660009081526002919091016020526040902090565b6000610b9282610e40565b15610b9f575060006106b2565b60005b8251811015610c36576060838281518110610bb957fe5b602090810291909101015190506000805b6007880154811015610c1a57610c0487896007018381548110610be957fe5b6000918252602090912001546001600160a01b0316856106e5565b15610c125760019150610c1a565b600101610bca565b5080610c2c57600093505050506106b2565b5050600101610ba2565b506001949350505050565b6001600160e01b0319929092166000908152600193840160205260409020805460ff191691151591909117815590910155565b600490910155565b6000826007018281548110610c8d57fe5b6000918252602090912001546001600160a01b03169392505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906106dd575050151592915050565b60008151604114610d055760405162461bcd60e51b8152600401610519906114e6565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115610d575760405162461bcd60e51b815260040161051990611596565b8060ff16601b14158015610d6f57508060ff16601c14155b15610d8c5760405162461bcd60e51b815260040161051990611601565b600060018783868660405160008152602001604052604051610db19493929190611491565b6020604051602081039080840390855afa158015610dd3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610e065760405162461bcd60e51b8152600401610519906114af565b9695505050505050565b600081604051602001610e239190611438565b604051602081830303815290604052805190602001209050919050565b60006060825167ffffffffffffffff81118015610e5c57600080fd5b50604051908082528060200260200182016040528015610e86578160200160208202803683370190505b50905060005b8351811015610ecf57838181518110610ea157fe5b602002602001015180519060200120828281518110610ebc57fe5b6020908102919091010152600101610e8c565b5060005b8151811015610f3557600181015b8251811015610f2c57828181518110610ef657fe5b6020026020010151838381518110610f0a57fe5b60200260200101511415610f245760019350505050610489565b600101610ee1565b50600101610ed3565b5060009392505050565b82805482825590600052602060002090600701600890048101928215610fdb5791602002820160005b83821115610fa957835183826101000a81548163ffffffff021916908360e01c02179055509260200192600401602081600301049283019260010302610f68565b8015610fd95782816101000a81549063ffffffff0219169055600401602081600301049283019260010302610fa9565b505b50610fe7929150610feb565b5090565b61100c91905b80821115610fe757805463ffffffff19168155600101610ff1565b90565b80356001600160a01b03811681146104ca57600080fd5b80356104ca816117d6565b600082601f830112611041578081fd5b813567ffffffffffffffff811115611057578182fd5b61106a601f8201601f191660200161177e565b915080825283602082850101111561108157600080fd5b8060208401602084013760009082016020015292915050565b6000806000606084860312156110ae578283fd5b8335925060208401356001600160a01b03811681146110cb578283fd5b9150604084013567ffffffffffffffff8111156110e6578182fd5b6110f286828701611031565b9150509250925092565b60006020828403121561110d578081fd5b81516106b2816117d6565b600060208284031215611129578081fd5b5035919050565b60008060408385031215611142578182fd5b82359150611153846020850161100f565b90509250929050565b600080600060608486031215611170578283fd5b83359250611181856020860161100f565b9150604084013590509250925092565b600080604083850312156111a3578182fd5b8235915060208301356111b5816117c5565b809150509250929050565b600080604083850312156111d2578182fd5b50508035926020909101359150565b6000806000606084860312156111f5578283fd5b833592506020808501359250604085013567ffffffffffffffff81111561121a578283fd5b80860187601f82011261122b578384fd5b8035915061124061123b836117a5565b61177e565b82815283810190828501865b85811015611275576112638c888435880101611031565b8452928601929086019060010161124c565b505080955050505050509250925092565b60008060006060848603121561129a578283fd5b8335925060208401359150604084013567ffffffffffffffff8111156110e6578182fd5b600080604083850312156112d0578182fd5b8235915060208301356111b5816117d6565b600080600080608085870312156112f7578081fd5b843593506020850135611309816117d6565b92506040850135611319816117c5565b9396929550929360600135925050565b6000806000806080858703121561133e578182fd5b84359350602080860135611351816117d6565b935060408601359250606086013567ffffffffffffffff811115611373578283fd5b80870188601f820112611384578384fd5b8035915061139461123b836117a5565b82815283810190828501858502840186018c10156113b0578687fd5b8693505b848410156113da576113c68c82611026565b8352600193909301929185019185016113b4565b50979a9699509497505050505050565b6001600160e01b031991909116815260040190565b60008251815b8181101561141f5760208186018101518583015201611405565b8181111561142d5782828501525b509190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b93845260ff9290921660208401526040830152606082015260800190565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526011908201527018d85b9b9bdd0b5859190b5dd85b1b195d607a1b604082015260600190565b6020808252600d908201526c30b63932b0b23c96b7bbb732b960991b604082015260600190565b6020808252600d908201526c34b73b30b634b216b7bbb732b960991b604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252600f908201526e696e76616c69642d6164647265737360881b604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526017908201527f7769746e6573732d63616e6e6f742d62652d6f776e6572000000000000000000604082015260600190565b6020808252600b908201526a6e6f742d7769746e65737360a81b604082015260600190565b6020808252601690820152753bb0b63632ba16b1b0b73737ba16b13296b7bbb732b960511b604082015260600190565b60208082526010908201526f31b0b73737ba16b0b23216b7bbb732b960811b604082015260600190565b6020808252600c908201526b696e76616c69642d6e616d6560a01b604082015260600190565b6020808252601d908201527f61742d6c656173742d6f6e652d7769746e6573732d7265717569726564000000604082015260600190565b6020808252600e908201526d7769746e6573732d65786973747360901b604082015260600190565b60405181810167ffffffffffffffff8111828210171561179d57600080fd5b604052919050565b600067ffffffffffffffff8211156117bb578081fd5b5060209081020190565b80151581146117d357600080fd5b50565b6001600160e01b0319811681146117d357600080fdfea2646970667358221220af5901ff7fe7ceb6d4e7011fb1f59a0ae8f389d481a48b11d5783dcd54a88d7c64736f6c63430006080033",
  "libraries": {},
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {
      "cumulativeSpendingInUSD(Storage.Data storage,uint256)": {
        "notice": "Cumulative value spent in USD after 'fromTimestamp' g"
      },
      "lastExecutionTime(Storage.Data storage,bytes4)": {
        "notice": "Last executed timestamp that the method of 'selector' called"
      },
      "minimumTransferLimitInUSD(Storage.Data storage)": {
        "notice": "How much an owner can spend with 0 witness     * For each signature of a witness is offered, limit is multiplied by 10"
      },
      "owner(Storage.Data storage)": {
        "notice": "The owner"
      },
      "transferCapacityInUSD(Storage.Data storage,uint256)": {
        "notice": "Transfer capacity available in USD     * 10**18 = 1 USD"
      },
      "witnessNames(Storage.Data storage,address)": {
        "notice": "Witness names for their addresses"
      },
      "witnesses(Storage.Data storage,uint256)": {
        "notice": "Witness addresses"
      }
    }
  },
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "1235600",
      "executionCost": "1313",
      "totalCost": "1236913"
    },
    "external": {
      "_verify(bytes32,address,bytes)": "infinite",
      "addSpending(Storage.Data storage,uint256)": "61217",
      "addWitness(Storage.Data storage,address,bytes32)": "64174",
      "areValidWitnessSignatures(Storage.Data storage,bytes32,bytes[])": "infinite",
      "cumulativeSpendingInUSD(Storage.Data storage,uint256)": "infinite",
      "incrementNonce(Storage.Data storage)": "21109",
      "isValidOwnerSignature(Storage.Data storage,bytes32,bytes)": "infinite",
      "label(Storage.Data storage)": "1138",
      "lastExecutionTime(Storage.Data storage,bytes4)": "1364",
      "locked(Storage.Data storage)": "1149",
      "minimumTransferLimitInUSD(Storage.Data storage)": "380",
      "nonce(Storage.Data storage)": "1198",
      "numberOfWitnesses(Storage.Data storage)": "1182",
      "owner(Storage.Data storage)": "1179",
      "removeWitness(Storage.Data storage,address)": "infinite",
      "securityPeriod(Storage.Data storage,bytes4)": "586",
      "setLabel(Storage.Data storage,bytes32)": "20353",
      "setLocked(Storage.Data storage,bool)": "21199",
      "setSecurityPeriod(Storage.Data storage,bytes4,uint256,bytes4[])": "infinite",
      "setSigningRequirements(Storage.Data storage,bytes4,bool,uint256)": "infinite",
      "signingRequirements(Storage.Data storage,bytes4)": "542",
      "transferCapacityInUSD(Storage.Data storage,uint256)": "infinite",
      "transferCapacityResetPeriod(Storage.Data storage)": "341",
      "transferOwnership(Storage.Data storage,address)": "23212",
      "updateLastExecutionTime(Storage.Data storage,bytes4)": "20511",
      "witnessNames(Storage.Data storage,address)": "1387",
      "witnesses(Storage.Data storage,uint256)": "2168"
    },
    "internal": {
      "_duplicate(bytes memory[] memory)": "infinite"
    }
  }
}