{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ETHTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueInUSD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Spent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Unlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        }
      ],
      "name": "WitnessAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "WitnessRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "owner",
              "type": "bytes"
            },
            {
              "internalType": "bytes[]",
              "name": "witnesses",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct Storage.Signatures",
          "name": "signatures",
          "type": "tuple"
        }
      ],
      "name": "addWitness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        }
      ],
      "name": "addWitnessHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "areValidWitnessSignatures",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromTimestamp",
          "type": "uint256"
        }
      ],
      "name": "cumulativeSpendingInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "owner",
              "type": "bytes"
            },
            {
              "internalType": "bytes[]",
              "name": "witnesses",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct Storage.Signatures",
          "name": "signatures",
          "type": "tuple"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "executeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IENSGateway",
          "name": "ensGateway",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "witnessAddrs",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "witnessNames",
          "type": "bytes32[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidOwnerSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "label",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "lastExecutionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "owner",
              "type": "bytes"
            },
            {
              "internalType": "bytes[]",
              "name": "witnesses",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct Storage.Signatures",
          "name": "signatures",
          "type": "tuple"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumTransferLimitInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfWitnesses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "owner",
              "type": "bytes"
            },
            {
              "internalType": "bytes[]",
              "name": "witnesses",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct Storage.Signatures",
          "name": "signatures",
          "type": "tuple"
        }
      ],
      "name": "removeWitness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "removeWitnessHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "subdomain",
          "type": "bytes32"
        }
      ],
      "name": "resolveENS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "methodId",
          "type": "bytes4"
        }
      ],
      "name": "securityPeriod",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "internalType": "bytes4[]",
              "name": "dependencies",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct Storage.SecurityPeriod",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "methodId",
          "type": "bytes4"
        }
      ],
      "name": "signingRequirements",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "owner",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "witnesses",
              "type": "uint256"
            }
          ],
          "internalType": "struct Storage.SigningRequirements",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfWitnessSignatures",
          "type": "uint256"
        }
      ],
      "name": "transferCapacityInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferCapacityResetPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "owner",
              "type": "bytes"
            },
            {
              "internalType": "bytes[]",
              "name": "witnesses",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct Storage.Signatures",
          "name": "signatures",
          "type": "tuple"
        }
      ],
      "name": "transferERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferERC20Hash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "owner",
              "type": "bytes"
            },
            {
              "internalType": "bytes[]",
              "name": "witnesses",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct Storage.Signatures",
          "name": "signatures",
          "type": "tuple"
        }
      ],
      "name": "transferETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferETHHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "owner",
              "type": "bytes"
            },
            {
              "internalType": "bytes[]",
              "name": "witnesses",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct Storage.Signatures",
          "name": "signatures",
          "type": "tuple"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnershipHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "owner",
              "type": "bytes"
            },
            {
              "internalType": "bytes[]",
              "name": "witnesses",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct Storage.Signatures",
          "name": "signatures",
          "type": "tuple"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "impl",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "owner",
              "type": "bytes"
            },
            {
              "internalType": "bytes[]",
              "name": "witnesses",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct Storage.Signatures",
          "name": "signatures",
          "type": "tuple"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "impl",
          "type": "address"
        }
      ],
      "name": "upgradeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "witnessNames",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "witnesses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x5b8C253517b6Bd003369173109693B01cb6841B5",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "5244979",
    "logsBloom": "0x
    "blockHash": "0x658a61532088e644a350edbd59b7ad562dfcc63fbfcd910af9c2e4b3ed95d46b",
    "transactionHash": "0x663f4806c90af2a042fabe61d2bc7693bdda6db73d2892b019c51fa7d12828ac",
    "logs": [],
    "blockNumber": 20691275,
    "cumulativeGasUsed": "5273287",
    "status": 1,
    "byzantium": true
  },
  "address": "0x24aa39584758916c4e5c156241e4586b31a38b48",
  "args": [],
  "solcInputHash": "0x0ba34002262c75f24ebbcd47c2a71ec7f5830be3e50c097a446a7d66537a7b5a",
  "metadata": "{\"compiler\":{\"version\":\"0.6.8+commit.0bbfe453\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ETHTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueInUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Spent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"WitnessAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WitnessRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"owner\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"witnesses\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Storage.Signatures\",\"name\":\"signatures\",\"type\":\"tuple\"}],\"name\":\"addWitness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"addWitnessHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"areValidWitnessSignatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTimestamp\",\"type\":\"uint256\"}],\"name\":\"cumulativeSpendingInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"owner\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"witnesses\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Storage.Signatures\",\"name\":\"signatures\",\"type\":\"tuple\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"executeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IENSGateway\",\"name\":\"ensGateway\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"witnessAddrs\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"witnessNames\",\"type\":\"bytes32[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidOwnerSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"label\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"lastExecutionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"owner\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"witnesses\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Storage.Signatures\",\"name\":\"signatures\",\"type\":\"tuple\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTransferLimitInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfWitnesses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"owner\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"witnesses\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Storage.Signatures\",\"name\":\"signatures\",\"type\":\"tuple\"}],\"name\":\"removeWitness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeWitnessHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subdomain\",\"type\":\"bytes32\"}],\"name\":\"resolveENS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"methodId\",\"type\":\"bytes4\"}],\"name\":\"securityPeriod\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes4[]\",\"name\":\"dependencies\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct Storage.SecurityPeriod\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"methodId\",\"type\":\"bytes4\"}],\"name\":\"signingRequirements\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"owner\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"witnesses\",\"type\":\"uint256\"}],\"internalType\":\"struct Storage.SigningRequirements\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfWitnessSignatures\",\"type\":\"uint256\"}],\"name\":\"transferCapacityInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferCapacityResetPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"owner\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"witnesses\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Storage.Signatures\",\"name\":\"signatures\",\"type\":\"tuple\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferERC20Hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"owner\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"witnesses\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Storage.Signatures\",\"name\":\"signatures\",\"type\":\"tuple\"}],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferETHHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"owner\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"witnesses\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Storage.Signatures\",\"name\":\"signatures\",\"type\":\"tuple\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"owner\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"witnesses\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Storage.Signatures\",\"name\":\"signatures\",\"type\":\"tuple\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"owner\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"witnesses\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Storage.Signatures\",\"name\":\"signatures\",\"type\":\"tuple\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"upgradeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"witnessNames\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"witnesses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addWitnessHash(address,bytes32)\":{\"returns\":{\"_0\":\"a hash used to generate signature to properly call 'addWitness()'\"}},\"areValidWitnessSignatures(bytes32,bytes[])\":{\"params\":{\"hash\":\"hashed message of calling a method\",\"signatures\":\"signed results of hash by witnesses\"}},\"execute(address[],uint256[],bytes[],(bytes,bytes[]))\":{\"params\":{\"data\":\"methodID + args for each execution\",\"targets\":\"contract addresses to be executed for each execution\",\"values\":\"amount of ETH for each execution\"}},\"executeHash(address[],uint256[],bytes[])\":{\"returns\":{\"_0\":\"a hash used to generate signature to properly call 'execute()'\"}},\"isValidOwnerSignature(bytes32,bytes)\":{\"params\":{\"hash\":\"hashed message of calling a method\",\"signature\":\"signed result of hash by the owner\"}},\"lockHash()\":{\"returns\":{\"_0\":\"a hash used to generate signature to properly call 'lock()'\"}},\"removeWitnessHash(address)\":{\"returns\":{\"_0\":\"a hash used to generate signature to properly call 'removeWitness()'\"}},\"transferERC20(address,address,uint256,(bytes,bytes[]))\":{\"params\":{\"to\":\"receiver address\",\"token\":\"ERC20 address\",\"value\":\"amount of ERC20\"}},\"transferERC20Hash(address,address,uint256)\":{\"returns\":{\"_0\":\"a hash used to generate signature to properly call 'transferERC20()'\"}},\"transferETH(address,uint256,(bytes,bytes[]))\":{\"params\":{\"to\":\"receiver address\",\"value\":\"amount of ETH\"}},\"transferETHHash(address,uint256)\":{\"returns\":{\"_0\":\"a hash used to generate signature to properly call 'transferETH()'\"}},\"transferOwnershipHash(address)\":{\"returns\":{\"_0\":\"a hash used to generate signature to properly call 'transferOwnership()'\"}},\"unlockHash()\":{\"returns\":{\"_0\":\"a hash used to generate signature to properly call 'unlock()'\"}},\"upgradeHash(address)\":{\"returns\":{\"_0\":\"a hash used to generate signature to properly call 'upgrade()'\"}}}},\"userdoc\":{\"methods\":{\"addWitness(address,bytes32,(bytes,bytes[]))\":{\"notice\":\"Adds a new owner     * Signatures of the owner needed\"},\"areValidWitnessSignatures(bytes32,bytes[])\":{\"notice\":\"Checks if all signatures were signed by a subset of distinct witnesses\"},\"execute(address[],uint256[],bytes[],(bytes,bytes[]))\":{\"notice\":\"Executes arbitrary contract functions If 'ERC20.approve()'s were called in the batched executions, then all the amounts of the approved tokens need to be spent by the end of the call\"},\"initialize(address,bytes32,address,address[],bytes32[])\":{\"notice\":\"Initializes the wallet\"},\"isValidOwnerSignature(bytes32,bytes)\":{\"notice\":\"Checks if the signature was signed by the owner\"},\"isValidSignature(bytes32,bytes)\":{\"notice\":\"If the signature was signed by the owner it returns 0x1626ba7e, otherwise 0xffffffff     * bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\") = 0x1626ba7e\"},\"lock((bytes,bytes[]))\":{\"notice\":\"Locks the wallet     * Signature of at least one of the witnesses required\"},\"minimumTransferLimitInUSD()\":{\"notice\":\"How much an owner can spend with 0 witness     * For each signature of a witness is offered, limit is multiplied by 10\"},\"removeWitness(address,(bytes,bytes[]))\":{\"notice\":\"Removes an existing owner     * Signature of the owner needed\"},\"transferCapacityInUSD(uint256)\":{\"notice\":\"Transfer capacity available in USD     * 10**18 = 1 USD\"},\"transferERC20(address,address,uint256,(bytes,bytes[]))\":{\"notice\":\"Transfers 'value' amount of ERC20 'token' to 'to'\"},\"transferETH(address,uint256,(bytes,bytes[]))\":{\"notice\":\"Transfers 'value' amount of ETH to 'to'\"},\"transferOwnership(address,(bytes,bytes[]))\":{\"notice\":\"Transfers the ownership to a new owner     * Signatures of '((n + 1) * 2) / 3' required where 'n' is the number of the witnesses\"},\"unlock((bytes,bytes[]))\":{\"notice\":\"Unlocks the wallet     * Signatures of '((n + 1) * 2) / 3' required where 'n' is the number of the witnesses Also, 24 hours needs to have passed after the lock has been called\"},\"upgrade(address,(bytes,bytes[]))\":{\"notice\":\"Upgrades to a new implementation     * Signature of the owner required\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/wallet/Wallet.sol\":\"Wallet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/resolver/contracts/Resolver.sol\":{\"content\":\"pragma solidity >=0.4.25;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver{\\n    event AddrChanged(bytes32 indexed node, address a);\\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\\n    event NameChanged(bytes32 indexed node, string name);\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n    /* Deprecated events */\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\\n    function addr(bytes32 node) external view returns (address);\\n    function addr(bytes32 node, uint coinType) external view returns(bytes memory);\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n    function dnsrr(bytes32 node) external view returns (bytes memory);\\n    function name(bytes32 node) external view returns (string memory);\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n    function text(bytes32 node, string calldata key) external view returns (string memory);\\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\\n    function setAddr(bytes32 node, address addr) external;\\n    function setAddr(bytes32 node, uint coinType, bytes calldata a) external;\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\n    function setName(bytes32 node, string calldata _name) external;\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n    function setText(bytes32 node, string calldata key, string calldata value) external;\\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool);\\n    function multicall(bytes[] calldata data) external returns(bytes[] memory results);\\n\\n    /* Deprecated functions */\\n    function content(bytes32 node) external view returns (bytes32);\\n    function multihash(bytes32 node) external view returns (bytes memory);\\n    function setContent(bytes32 node, bytes32 hash) external;\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0xb992c6a78066be42d7e9b54d0e385e87267d7e229099ed6c857c9d9ace43995d\"},\"@openzeppelin/contracts/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0x1efcb1ccef6b3bce65467c4b704cec8d0582e35ff48352269ba8cda4b54ae3da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdfb4f812600ba4ce6738c35584ceb8c9433472583051b48ba5b1f66cb758a498\",\"license\":\"MIT\"},\"contracts/core/interfaces/IENSGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface IENSGateway {\\n    event SubdomainRegistered(bytes32 indexed label, address owner, address addr);\\n\\n    function ens() external view returns (address);\\n\\n    function resolver() external view returns (address);\\n\\n    function tld() external view returns (string memory);\\n\\n    function tldNode() external view returns (bytes32);\\n\\n    function subdomainNode(bytes32 label) external view returns (bytes32);\\n\\n    function ownerOfSubdomain(bytes32 label) external view returns (address);\\n\\n    function resolverOfSubdomain(bytes32 label) external view returns (address);\\n\\n    function registerSubdomain(bytes32 label, address addr) external;\\n}\\n\",\"keccak256\":\"0xa79b5499ba2ca81d3dd1e6fa32598e242c0aa941a1b076f075b2ecb41de0ad03\",\"license\":\"MIT\"},\"contracts/core/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface IPriceFeed {\\n    function ethPriceInUSD(uint256 amount) external view returns (uint256);\\n\\n    function erc20PriceInETH(address token, uint256 amount) external view returns (uint256);\\n\\n    function erc20PriceInUSD(address token, uint256 amount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7a243cca11662e1358249cbc3792dd9de3619bcde631058d678804071e993339\",\"license\":\"MIT\"},\"contracts/core/interfaces/IWalletRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface IWalletRegistry {\\n    function versionNames() external returns (bytes32[] memory);\\n\\n    function register(bytes32 versionName, address addr) external;\\n\\n    function latest() external view returns (bytes32 versionName, address addr);\\n\\n    function queryWithAddress(address addr) external view returns (bytes32 versionName);\\n\\n    function queryWithVersionName(bytes32 versionName) external view returns (address add);\\n}\\n\",\"keccak256\":\"0x83954e52aac252147d9fd7d3722d292dd5fb357b6618c7e42685acc2b4517d58\",\"license\":\"MIT\"},\"contracts/wallet/Wallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./mixins/BaseMixin.sol\\\";\\nimport \\\"./mixins/Authorizable.sol\\\";\\nimport \\\"./mixins/Upgradeable.sol\\\";\\nimport \\\"./mixins/Lockable.sol\\\";\\nimport \\\"./mixins/Transferable.sol\\\";\\nimport \\\"./mixins/Executable.sol\\\";\\nimport \\\"./interfaces/IWallet.sol\\\";\\nimport \\\"../core/interfaces/IENSGateway.sol\\\";\\n\\ncontract Wallet is\\n    BaseMixin,\\n    Authorizable,\\n    Upgradeable,\\n    Lockable,\\n    Transferable,\\n    Executable,\\n    IWallet\\n{\\n    /**\\n     * @notice Initializes the wallet\\n     */\\n    function initialize(\\n        IENSGateway ensGateway,\\n        bytes32 label,\\n        address owner,\\n        address[] memory witnessAddrs,\\n        bytes32[] memory witnessNames\\n    ) public override initializer {\\n        _initialize(ensGateway, label);\\n        require(witnessAddrs.length == witnessNames.length, \\\"different-param-lengths\\\");\\n        require(witnessAddrs.length > 0, \\\"at-least-one-witness-required\\\");\\n\\n        _storage.transferOwnership(owner);\\n        for (uint256 i = 0; i < witnessAddrs.length; i++) {\\n            _storage.addWitness(witnessAddrs[i], witnessNames[i]);\\n        }\\n\\n        _initialize();\\n    }\\n\\n    function _initialize()\\n        internal\\n        override(Authorizable, Upgradeable, Lockable, Transferable, Executable)\\n    {\\n        Authorizable._initialize();\\n        Upgradeable._initialize();\\n        Lockable._initialize();\\n        Transferable._initialize();\\n        Executable._initialize();\\n    }\\n}\\n\",\"keccak256\":\"0x14dbaf32946990ca33dcd3068fd63ee2d57a28d93ccc897a1293d5af7d08bf96\",\"license\":\"MIT\"},\"contracts/wallet/interfaces/IWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../mixins/interfaces/IBaseMixin.sol\\\";\\nimport \\\"../mixins/interfaces/IAuthorizable.sol\\\";\\nimport \\\"../mixins/interfaces/IUpgradeable.sol\\\";\\nimport \\\"../mixins/interfaces/ILockable.sol\\\";\\nimport \\\"../mixins/interfaces/ITransferable.sol\\\";\\nimport \\\"../mixins/interfaces/IExecutable.sol\\\";\\nimport \\\"../../core/interfaces/IENSGateway.sol\\\";\\n\\ninterface IWallet is\\n    IBaseMixin,\\n    IAuthorizable,\\n    IUpgradeable,\\n    ILockable,\\n    ITransferable,\\n    IExecutable\\n{\\n    function initialize(\\n        IENSGateway ensGateway,\\n        bytes32 label,\\n        address owner,\\n        address[] calldata witnessAddrs,\\n        bytes32[] calldata witnessNames\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa819623c8d159f175deac9a063347f42691b0795cdcc3a832800e05c5e89cb50\",\"license\":\"MIT\"},\"contracts/wallet/libraries/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary Storage {\\n    using ECDSA for bytes32;\\n    using Address for address;\\n\\n    uint256 private constant MINIMUM_TRANSFER_LIMIT_IN_USD = 10**20; // 100 USD\\n    uint256 private constant TRANSFER_CAPACITY_RESET_PERIOD = 24 hours;\\n\\n    struct Signatures {\\n        bytes owner;\\n        bytes[] witnesses;\\n    }\\n\\n    struct SigningRequirements {\\n        bool owner;\\n        uint256 witnesses;\\n    }\\n\\n    struct SecurityPeriod {\\n        uint256 time;\\n        bytes4[] dependencies;\\n    }\\n\\n    struct Spending {\\n        uint256 valueInUSD;\\n        uint256 timestamp;\\n    }\\n\\n    struct Data {\\n        uint256 _nonce;\\n        mapping(bytes4 => SigningRequirements) _signingRequirements;\\n        mapping(bytes4 => SecurityPeriod) _securityPeriods;\\n        mapping(bytes4 => uint256) _lastExecutionTime;\\n        bytes32 _label;\\n        address _owner;\\n        mapping(address => bytes32) _witnessNames;\\n        address[] _witnesses;\\n        bool _locked;\\n        Spending[] _spending;\\n    }\\n\\n    function label(Data storage self) public view returns (bytes32) {\\n        return self._label;\\n    }\\n\\n    function setLabel(Data storage self, bytes32 label_) public {\\n        self._label = label_;\\n    }\\n\\n    function nonce(Data storage self) public view returns (uint256) {\\n        return self._nonce;\\n    }\\n\\n    function incrementNonce(Data storage self) public {\\n        self._nonce += 1;\\n    }\\n\\n    function signingRequirements(Data storage self, bytes4 methodId)\\n        public\\n        view\\n        returns (SigningRequirements storage)\\n    {\\n        return self._signingRequirements[methodId];\\n    }\\n\\n    function setSigningRequirements(\\n        Data storage self,\\n        bytes4 methodId,\\n        bool ownerRequired,\\n        uint256 witnessesRequired\\n    ) public {\\n        self._signingRequirements[methodId].owner = ownerRequired;\\n        self._signingRequirements[methodId].witnesses = witnessesRequired;\\n    }\\n\\n    function securityPeriod(Data storage self, bytes4 methodId)\\n        public\\n        view\\n        returns (SecurityPeriod storage)\\n    {\\n        return self._securityPeriods[methodId];\\n    }\\n\\n    function setSecurityPeriod(\\n        Data storage self,\\n        bytes4 methodId,\\n        uint256 time,\\n        bytes4[] memory dependencies\\n    ) public {\\n        self._securityPeriods[methodId].time = time;\\n        self._securityPeriods[methodId].dependencies = dependencies;\\n    }\\n\\n    /**\\n     * @notice Last executed timestamp that the method of 'selector' called\\n     */\\n    function lastExecutionTime(Data storage self, bytes4 selector) public view returns (uint256) {\\n        return self._lastExecutionTime[selector];\\n    }\\n\\n    function updateLastExecutionTime(Data storage self, bytes4 selector) public {\\n        self._lastExecutionTime[selector] = now;\\n    }\\n\\n    /**\\n     * @notice The owner\\n     */\\n    function owner(Data storage self) public view returns (address) {\\n        return self._owner;\\n    }\\n\\n    function transferOwnership(Data storage self, address newOwner) public {\\n        require(newOwner != address(0), \\\"invalid-owner\\\");\\n        require(newOwner != address(this), \\\"wallet-cannot-be-owner\\\");\\n        require(self._witnessNames[newOwner] == bytes32(0), \\\"witness-cannot-be-owner\\\");\\n        address previousOwner = self._owner;\\n        require(previousOwner != newOwner, \\\"already-owner\\\");\\n        self._owner = newOwner;\\n    }\\n\\n    /**\\n     * @notice Witness names for their addresses\\n     */\\n    function witnessNames(Data storage self, address addr) public view returns (bytes32) {\\n        return self._witnessNames[addr];\\n    }\\n\\n    /**\\n     * @notice Witness addresses\\n     */\\n    function witnesses(Data storage self, uint256 index) public view returns (address) {\\n        return self._witnesses[index];\\n    }\\n\\n    function numberOfWitnesses(Data storage self) public view returns (uint256) {\\n        return self._witnesses.length;\\n    }\\n\\n    function addWitness(\\n        Data storage self,\\n        address addr,\\n        bytes32 name\\n    ) public {\\n        require(addr != address(0), \\\"invalid-address\\\");\\n        require(name != bytes32(0), \\\"invalid-name\\\");\\n        require(addr != address(this), \\\"cannot-add-wallet\\\");\\n        require(self._owner != addr, \\\"cannot-add-owner\\\");\\n        require(self._witnessNames[addr] == bytes32(0), \\\"witness-exists\\\");\\n\\n        self._witnessNames[addr] = name;\\n        self._witnesses.push(addr);\\n    }\\n\\n    function removeWitness(Data storage self, address addr) public {\\n        require(addr != address(0), \\\"invalid-address\\\");\\n        require(self._witnesses.length > 1, \\\"at-least-one-witness-required\\\");\\n        require(self._witnessNames[addr] != bytes32(0), \\\"not-witness\\\");\\n\\n        delete self._witnessNames[addr];\\n        for (uint256 i = 0; i < self._witnesses.length; i++) {\\n            if (self._witnesses[i] == addr) {\\n                self._witnesses[i] = self._witnesses[self._witnesses.length - 1];\\n                self._witnesses.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function locked(Data storage self) public view returns (bool) {\\n        return self._locked;\\n    }\\n\\n    function setLocked(Data storage self, bool newLocked) public {\\n        self._locked = newLocked;\\n    }\\n\\n    /**\\n     * @notice How much an owner can spend with 0 witness\\n     *\\n     * For each signature of a witness is offered, limit is multiplied by 10\\n     */\\n    function minimumTransferLimitInUSD(Data storage) public pure returns (uint256) {\\n        return MINIMUM_TRANSFER_LIMIT_IN_USD;\\n    }\\n\\n    function transferCapacityResetPeriod(Data storage) public pure returns (uint256) {\\n        return TRANSFER_CAPACITY_RESET_PERIOD;\\n    }\\n\\n    /**\\n     * @notice Transfer capacity available in USD\\n     *\\n     * 10**18 = 1 USD\\n     */\\n    function transferCapacityInUSD(Data storage self, uint256 numberOfWitnessSignatures)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 limitInUSD = MINIMUM_TRANSFER_LIMIT_IN_USD * (10**numberOfWitnessSignatures);\\n        uint256 spendingInUSD = cumulativeSpendingInUSD(self, now - TRANSFER_CAPACITY_RESET_PERIOD);\\n        return limitInUSD > spendingInUSD ? limitInUSD - spendingInUSD : 0;\\n    }\\n\\n    /**\\n     * @notice Cumulative value spent in USD after 'fromTimestamp'\\n     g\\n     */\\n    function cumulativeSpendingInUSD(Data storage self, uint256 fromTimestamp)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 spending = 0;\\n        if (self._spending.length > 0) {\\n            for (uint256 i = self._spending.length; i > 0; i--) {\\n                Spending storage spent = self._spending[i - 1];\\n                if (spent.timestamp < fromTimestamp) {\\n                    break;\\n                }\\n                spending += spent.valueInUSD;\\n            }\\n        }\\n        return spending;\\n    }\\n\\n    function addSpending(Data storage self, uint256 valueInUSD) public {\\n        Spending storage spent = self._spending.push();\\n        spent.valueInUSD = valueInUSD;\\n        spent.timestamp = now;\\n    }\\n\\n    function isValidOwnerSignature(\\n        Data storage self,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) public view returns (bool) {\\n        return _verify(hash, self._owner, signature);\\n    }\\n\\n    function areValidWitnessSignatures(\\n        Data storage self,\\n        bytes32 hash,\\n        bytes[] memory signatures\\n    ) public view returns (bool) {\\n        if (_duplicate(signatures)) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < signatures.length; i++) {\\n            bytes memory signature = signatures[i];\\n            bool valid = false;\\n            for (uint256 j = 0; j < self._witnesses.length; j++) {\\n                if (_verify(hash, self._witnesses[j], signature)) {\\n                    valid = true;\\n                    break;\\n                }\\n            }\\n            if (!valid) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @return true if array has duplicate items, false otherwise\\n     */\\n    function _duplicate(bytes[] memory array) private pure returns (bool) {\\n        bytes32[] memory hashes = new bytes32[](array.length);\\n        for (uint256 i = 0; i < array.length; i++) {\\n            hashes[i] = keccak256(array[i]);\\n        }\\n        for (uint256 i = 0; i < hashes.length; i++) {\\n            for (uint256 j = i + 1; j < hashes.length; j++) {\\n                if (hashes[i] == hashes[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _verify(\\n        bytes32 hash,\\n        address signer,\\n        bytes memory signature\\n    ) public view returns (bool) {\\n        if (signer.isContract()) {\\n            // Consider the signer as an EIP-1271 compatible contract\\n            // bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\")) = 0x1626ba7e\\n            bytes4 magicValue = 0x1626ba7e;\\n            (bool success, bytes memory data) = signer.staticcall(abi.encodePacked(magicValue));\\n            if (success) {\\n                bytes4 returned = abi.decode(data, (bytes4));\\n                return magicValue == returned;\\n            } else {\\n                return false;\\n            }\\n        } else {\\n            // Try EIP-712\\n            bool v = signer == hash.recover(signature);\\n            if (v) {\\n                return true;\\n            } else {\\n                // Consider signed by web3.eth_sign\\n                hash = hash.toEthSignedMessageHash();\\n                return signer == hash.recover(signature);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x39e3e977fcb31db7cb2c525f798f0628778c593fcb71dd48a9417ddd08a56c21\",\"license\":\"MIT\"},\"contracts/wallet/mixins/Authorizable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BaseMixin.sol\\\";\\nimport \\\"./interfaces/IAuthorizable.sol\\\";\\n\\n/**\\n * @notice Implements https://eips.ethereum.org/EIPS/eip-173\\n * EIP-173: Contract Ownership Standard\\n */\\nabstract contract Authorizable is BaseMixin, IAuthorizable {\\n    function _initialize() internal virtual {\\n        _storage.setSigningRequirements(\\n            this.transferOwnership.selector,\\n            false,\\n            ((_storage.numberOfWitnesses() + 1) * 2) / 3\\n        );\\n        _storage.setSigningRequirements(this.addWitness.selector, true, 0);\\n        _storage.setSigningRequirements(this.removeWitness.selector, true, 0);\\n\\n        _storage.setSecurityPeriod(this.transferOwnership.selector, 0, new bytes4[](0));\\n        bytes4[] memory dependencies = new bytes4[](3);\\n        dependencies[0] = this.transferOwnership.selector;\\n        dependencies[1] = this.addWitness.selector;\\n        dependencies[2] = this.removeWitness.selector;\\n        _storage.setSecurityPeriod(this.addWitness.selector, 24 hours, dependencies);\\n        _storage.setSecurityPeriod(this.removeWitness.selector, 24 hours, dependencies);\\n    }\\n\\n    function owner() public override view returns (address) {\\n        return _storage.owner();\\n    }\\n\\n    function witnessNames(address addr) public override view returns (bytes32) {\\n        return _storage.witnessNames(addr);\\n    }\\n\\n    function witnesses(uint256 index) public override view returns (address) {\\n        return _storage.witnesses(index);\\n    }\\n\\n    function numberOfWitnesses() public override view returns (uint256) {\\n        return _storage.numberOfWitnesses();\\n    }\\n\\n    /**\\n     * @notice Transfers the ownership to a new owner\\n     *\\n     * Signatures of '((n + 1) * 2) / 3' required where 'n' is the number of the witnesses\\n     */\\n    function transferOwnership(address newOwner, Storage.Signatures memory signatures)\\n        public\\n        override\\n        whenInitialized\\n    {\\n        _ensureSecurityPeriodPassed(this.transferOwnership.selector);\\n        _ensureSignaturesValid(\\n            this.transferOwnership.selector,\\n            transferOwnershipHash(newOwner),\\n            signatures\\n        );\\n\\n        _storage.incrementNonce();\\n        _storage.updateLastExecutionTime(this.transferOwnership.selector);\\n\\n        address previousOwner = _storage.owner();\\n        _storage.transferOwnership(newOwner);\\n\\n        emit OwnershipTransferred(previousOwner, newOwner);\\n    }\\n\\n    /**\\n     * @return a hash used to generate signature to properly call 'transferOwnership()'\\n     */\\n    function transferOwnershipHash(address newOwner) public override view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    bytes1(0x19),\\n                    bytes1(0),\\n                    address(this),\\n                    _storage.nonce(),\\n                    this.transferOwnership.selector,\\n                    newOwner\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Adds a new owner\\n     *\\n     * Signatures of the owner needed\\n     */\\n    function addWitness(\\n        address addr,\\n        bytes32 name,\\n        Storage.Signatures memory signatures\\n    ) public override whenInitialized whenNotLocked {\\n        _ensureSecurityPeriodPassed(this.addWitness.selector);\\n        _ensureSignaturesValid(this.addWitness.selector, addWitnessHash(addr, name), signatures);\\n\\n        _storage.incrementNonce();\\n        _storage.updateLastExecutionTime(this.addWitness.selector);\\n        _storage.addWitness(addr, name);\\n\\n        emit WitnessAdded(addr, name);\\n    }\\n\\n    /**\\n     * @return a hash used to generate signature to properly call 'addWitness()'\\n     */\\n    function addWitnessHash(address addr, bytes32 name) public override view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    bytes1(0x19),\\n                    bytes1(0),\\n                    address(this),\\n                    _storage.nonce(),\\n                    this.addWitness.selector,\\n                    addr,\\n                    name\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Removes an existing owner\\n     *\\n     * Signature of the owner needed\\n     */\\n    function removeWitness(address addr, Storage.Signatures memory signatures)\\n        public\\n        override\\n        whenInitialized\\n        whenNotLocked\\n    {\\n        _ensureSecurityPeriodPassed(this.removeWitness.selector);\\n        _ensureSignaturesValid(this.removeWitness.selector, removeWitnessHash(addr), signatures);\\n\\n        _storage.incrementNonce();\\n        _storage.updateLastExecutionTime(this.removeWitness.selector);\\n        _storage.removeWitness(addr);\\n\\n        emit WitnessRemoved(addr);\\n    }\\n\\n    /**\\n     * @return a hash used to generate signature to properly call 'removeWitness()'\\n     */\\n    function removeWitnessHash(address addr) public override view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    bytes1(0x19),\\n                    bytes1(0),\\n                    address(this),\\n                    _storage.nonce(),\\n                    this.removeWitness.selector,\\n                    addr\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x7b274b62e77652a96d5c81dd658c261b1f5fe7165036a067b8060c7be5e324d0\",\"license\":\"MIT\"},\"contracts/wallet/mixins/BaseMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@ensdomains/resolver/contracts/Resolver.sol\\\";\\n\\nimport \\\"./interfaces/IBaseMixin.sol\\\";\\nimport \\\"../../core/interfaces/IENSGateway.sol\\\";\\nimport \\\"../../core/interfaces/IPriceFeed.sol\\\";\\n\\n/**\\n * @notice Implements https://eips.ethereum.org/EIPS/eip-1271\\n * EIP-1271: Standard Signature Validation Method for Contracts\\n */\\nabstract contract BaseMixin is IBaseMixin {\\n    using Storage for Storage.Data;\\n\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n    bool private _initialized;\\n    bool private _initializing;\\n    uint256 private _status;\\n    IENSGateway private _ensGateway;\\n    Storage.Data internal _storage;\\n\\n    modifier whenInitialized {\\n        require(_initialized, \\\"not-initialized\\\");\\n        _;\\n    }\\n\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"already-initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n\\n        emit Initialized();\\n    }\\n\\n    modifier nonReentrant {\\n        require(_status != ENTERED, \\\"reentrant-call\\\");\\n\\n        _status = ENTERED;\\n        _;\\n        _status = NOT_ENTERED;\\n    }\\n\\n    modifier whenLocked {\\n        require(_storage.locked(), \\\"not-locked\\\");\\n        _;\\n    }\\n\\n    modifier whenNotLocked {\\n        require(!_storage.locked(), \\\"already-locked\\\");\\n        _;\\n    }\\n\\n    function _initialize(IENSGateway ensGateway, bytes32 label) internal {\\n        require(address(ensGateway) != address(0), \\\"invalid-ens-gateway\\\");\\n        require(label != bytes32(0), \\\"invalid-label\\\");\\n\\n        _status = NOT_ENTERED;\\n        _ensGateway = ensGateway;\\n        _ensGateway.registerSubdomain(label, address(this));\\n        _storage.setLabel(label);\\n    }\\n\\n    function _ensureSignaturesValid(\\n        bytes4 methodId,\\n        bytes32 hash,\\n        Storage.Signatures memory signatures\\n    ) internal view {\\n        Storage.SigningRequirements storage requirements = _storage.signingRequirements(methodId);\\n        if (requirements.owner) {\\n            require(_storage.isValidOwnerSignature(hash, signatures.owner), \\\"not-signed-by-owner\\\");\\n        }\\n        require(signatures.witnesses.length >= requirements.witnesses, \\\"more-signatures-required\\\");\\n        require(\\n            _storage.areValidWitnessSignatures(hash, signatures.witnesses),\\n            \\\"not-signed-by-witnesses\\\"\\n        );\\n    }\\n\\n    function _ensureSecurityPeriodPassed(bytes4 methodId) internal view {\\n        Storage.SecurityPeriod storage period = _storage.securityPeriod(methodId);\\n        for (uint256 i = 0; i < period.dependencies.length; i++) {\\n            require(\\n                now > _storage.lastExecutionTime(period.dependencies[i]) + period.time,\\n                \\\"security-period-not-passed\\\"\\n            );\\n        }\\n    }\\n\\n    function _addETHSpending(uint256 value, uint256 numberOfWitnessSignatures) internal {\\n        uint256 valueInUSD = _priceFeed().ethPriceInUSD(value);\\n        uint256 limitInUSD = _storage.transferCapacityInUSD(numberOfWitnessSignatures);\\n        require(valueInUSD <= limitInUSD, \\\"transfer-limit-exceeded\\\");\\n\\n        _storage.addSpending(valueInUSD);\\n\\n        emit Spent(valueInUSD, now);\\n    }\\n\\n    function _addERC20Spending(\\n        address token,\\n        uint256 value,\\n        uint256 numberOfWitnessSignatures\\n    ) internal {\\n        uint256 valueInUSD = _priceFeed().erc20PriceInUSD(token, value);\\n        uint256 limitInUSD = _storage.transferCapacityInUSD(numberOfWitnessSignatures);\\n        require(valueInUSD <= limitInUSD, \\\"transfer-limit-exceeded\\\");\\n\\n        _storage.addSpending(valueInUSD);\\n\\n        emit Spent(valueInUSD, now);\\n    }\\n\\n    function _priceFeed() internal view returns (IPriceFeed) {\\n        return IPriceFeed(resolveENS(keccak256(abi.encodePacked(\\\"price-feed-v0\\\"))));\\n    }\\n\\n    function initialized() public override view returns (bool) {\\n        return _initialized;\\n    }\\n\\n    function label() public override view returns (bytes32) {\\n        return _storage.label();\\n    }\\n\\n    function nonce() public override view returns (uint256) {\\n        return _storage.nonce();\\n    }\\n\\n    function signingRequirements(bytes4 methodId)\\n        public\\n        override\\n        view\\n        returns (Storage.SigningRequirements memory)\\n    {\\n        return _storage.signingRequirements(methodId);\\n    }\\n\\n    function securityPeriod(bytes4 methodId)\\n        public\\n        override\\n        view\\n        returns (Storage.SecurityPeriod memory)\\n    {\\n        return _storage.securityPeriod(methodId);\\n    }\\n\\n    function lastExecutionTime(bytes4 selector) public override view returns (uint256) {\\n        return _storage.lastExecutionTime(selector);\\n    }\\n\\n    function resolveENS(bytes32 subdomain) public override view returns (address) {\\n        address resolver = _ensGateway.resolverOfSubdomain(subdomain);\\n        return Resolver(resolver).addr(_ensGateway.subdomainNode(subdomain));\\n    }\\n\\n    /**\\n     * @notice If the signature was signed by the owner it returns 0x1626ba7e, otherwise 0xffffffff\\n     *\\n     * bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\") = 0x1626ba7e\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature)\\n        public\\n        override\\n        view\\n        returns (bytes4)\\n    {\\n        if (_storage.isValidOwnerSignature(hash, signature)) {\\n            return 0x1626ba7e;\\n        } else {\\n            return 0xffffffff;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the signature was signed by the owner\\n     *\\n     * @param hash hashed message of calling a method\\n     * @param signature signed result of hash by the owner\\n     */\\n    function isValidOwnerSignature(bytes32 hash, bytes memory signature)\\n        public\\n        override\\n        view\\n        returns (bool)\\n    {\\n        return _storage.isValidOwnerSignature(hash, signature);\\n    }\\n\\n    /**\\n     * @notice Checks if all signatures were signed by a subset of distinct witnesses\\n     *\\n     * @param hash hashed message of calling a method\\n     * @param signatures signed results of hash by witnesses\\n     */\\n    function areValidWitnessSignatures(bytes32 hash, bytes[] memory signatures)\\n        public\\n        override\\n        view\\n        returns (bool)\\n    {\\n        return _storage.areValidWitnessSignatures(hash, signatures);\\n    }\\n}\\n\",\"keccak256\":\"0xfc70eb6c0604d6670b628faec9495f46851a2801b7854f119502c86f5687d7e8\",\"license\":\"MIT\"},\"contracts/wallet/mixins/Executable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./BaseMixin.sol\\\";\\nimport \\\"./interfaces/IExecutable.sol\\\";\\nimport \\\"./interfaces/IAuthorizable.sol\\\";\\n\\nabstract contract Executable is BaseMixin, IExecutable {\\n    using SafeERC20 for IERC20;\\n\\n    struct ERC20Approval {\\n        address token;\\n        address spender;\\n    }\\n    ERC20Approval[] internal _approvals;\\n\\n    function _initialize() internal virtual {\\n        _storage.setSigningRequirements(this.execute.selector, true, 0);\\n\\n        bytes4[] memory dependencies = new bytes4[](2);\\n        dependencies[0] = IAuthorizable.transferOwnership.selector;\\n        _storage.setSecurityPeriod(this.execute.selector, 24 hours, dependencies);\\n    }\\n\\n    /**\\n     * @notice Executes arbitrary contract functions\\n     * If 'ERC20.approve()'s were called in the batched executions,\\n     * then all the amounts of the approved tokens need to be spent by the end of the call\\n     *\\n     * @param targets contract addresses to be executed for each execution\\n     * @param values amount of ETH for each execution\\n     * @param data methodID + args for each execution\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory data,\\n        Storage.Signatures memory signatures\\n    ) public override payable whenInitialized whenNotLocked returns (bytes[] memory) {\\n        require(\\n            targets.length == values.length && values.length == data.length,\\n            \\\"different-params-length\\\"\\n        );\\n        _ensureSecurityPeriodPassed(this.execute.selector);\\n        _ensureSignaturesValid(\\n            this.execute.selector,\\n            executeHash(targets, values, data),\\n            signatures\\n        );\\n\\n        _storage.incrementNonce();\\n        _storage.updateLastExecutionTime(this.execute.selector);\\n\\n        bytes[] memory returned = new bytes[](targets.length);\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            returned[i] = _execute(targets[i], values[i], data[i], signatures);\\n        }\\n        _ensureApprovedERC20SpentAll();\\n        return returned;\\n    }\\n\\n    function _execute(\\n        address target,\\n        uint256 value,\\n        bytes memory data,\\n        Storage.Signatures memory signatures\\n    ) internal nonReentrant returns (bytes memory) {\\n        require(target != address(0), \\\"invalid-target\\\");\\n        require(value <= address(this).balance, \\\"not-enough-balance\\\");\\n\\n        emit Executed(target, value, data);\\n\\n        if (value > 0) {\\n            _addETHSpending(value, signatures.witnesses.length);\\n        }\\n        if (data.length > 0) {\\n            (bytes4 methodId, bytes memory args) = abi.decode(data, (bytes4, bytes));\\n            if (methodId == IERC20.transfer.selector) {\\n                (address to, uint256 amount) = abi.decode(args, (address, uint256));\\n                _addERC20Spending(target, amount, signatures.witnesses.length);\\n                IERC20(target).safeTransfer(to, value);\\n                return bytes(\\\"\\\");\\n            } else if (methodId == IERC20.approve.selector) {\\n                (address to, uint256 amount) = abi.decode(args, (address, uint256));\\n                _addERC20Spending(target, amount, signatures.witnesses.length);\\n                _addERC20Approval(target, to);\\n                IERC20(target).approve(to, value);\\n                return bytes(\\\"\\\");\\n            } else {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (bool success, bytes memory returned) = target.call{value: value}(data);\\n                if (success) {\\n                    return returned;\\n                } else {\\n                    if (returned.length > 0) {\\n                        assembly {\\n                            let returned_size := mload(returned)\\n                            revert(add(32, returned), returned_size)\\n                        }\\n                    } else {\\n                        revert(\\\"external-call-failed\\\");\\n                    }\\n                }\\n            }\\n        } else {\\n            _addETHSpending(value, signatures.witnesses.length);\\n            payable(target).transfer(value);\\n            return bytes(\\\"\\\");\\n        }\\n    }\\n\\n    function _addERC20Approval(address token, address spender) private {\\n        if (spender == resolveENS(keccak256(abi.encodePacked(\\\"tx-relayer-v0\\\")))) {\\n            return;\\n        }\\n        ERC20Approval storage approval = _approvals.push();\\n        approval.token = token;\\n        approval.spender = spender;\\n    }\\n\\n    function _ensureApprovedERC20SpentAll() private {\\n        for (uint256 i = 0; i < _approvals.length; i++) {\\n            ERC20Approval storage approval = _approvals[i];\\n            require(\\n                IERC20(approval.token).allowance(address(this), approval.spender) == 0,\\n                \\\"approved-erc20-not-spent\\\"\\n            );\\n        }\\n        delete _approvals;\\n    }\\n\\n    /**\\n     * @return a hash used to generate signature to properly call 'execute()'\\n     */\\n    function executeHash(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory data\\n    ) public override view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    bytes1(0x19),\\n                    bytes1(0),\\n                    address(this),\\n                    _storage.nonce(),\\n                    this.execute.selector,\\n                    targets,\\n                    values,\\n                    abi.encode(data)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xab15afc1bae8a170fa24b95e1ae16513f84dccc9225437c7b3f04a5bb4f9ad90\",\"license\":\"MIT\"},\"contracts/wallet/mixins/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BaseMixin.sol\\\";\\nimport \\\"./interfaces/ILockable.sol\\\";\\n\\nabstract contract Lockable is BaseMixin, ILockable {\\n    function _initialize() internal virtual {\\n        _storage.setSigningRequirements(this.lock.selector, false, 1);\\n        _storage.setSigningRequirements(\\n            this.unlock.selector,\\n            false,\\n            ((_storage.numberOfWitnesses() + 1) * 2) / 3\\n        );\\n\\n        _storage.setSecurityPeriod(this.lock.selector, 0, new bytes4[](0));\\n        bytes4[] memory dependencies = new bytes4[](1);\\n        dependencies[0] = this.lock.selector;\\n        _storage.setSecurityPeriod(this.unlock.selector, 24 hours, dependencies);\\n    }\\n\\n    function locked() public override view returns (bool) {\\n        return _storage.locked();\\n    }\\n\\n    /**\\n     * @notice Locks the wallet\\n     *\\n     * Signature of at least one of the witnesses required\\n     */\\n    function lock(Storage.Signatures memory signatures)\\n        public\\n        override\\n        whenInitialized\\n        whenNotLocked\\n    {\\n        _ensureSignaturesValid(this.lock.selector, lockHash(), signatures);\\n\\n        _storage.incrementNonce();\\n        _storage.updateLastExecutionTime(this.lock.selector);\\n        _storage.setLocked(true);\\n\\n        emit Locked();\\n    }\\n\\n    /**\\n     * @return a hash used to generate signature to properly call 'lock()'\\n     */\\n    function lockHash() public override view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    bytes1(0x19),\\n                    bytes1(0),\\n                    address(this),\\n                    _storage.nonce(),\\n                    this.lock.selector\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Unlocks the wallet\\n     *\\n     * Signatures of '((n + 1) * 2) / 3' required where 'n' is the number of the witnesses\\n     * Also, 24 hours needs to have passed after the lock has been called\\n     */\\n    function unlock(Storage.Signatures memory signatures)\\n        public\\n        override\\n        whenInitialized\\n        whenLocked\\n    {\\n        _ensureSecurityPeriodPassed(this.unlock.selector);\\n        _ensureSignaturesValid(this.unlock.selector, unlockHash(), signatures);\\n\\n        _storage.incrementNonce();\\n        _storage.updateLastExecutionTime(this.unlock.selector);\\n        _storage.setLocked(false);\\n\\n        emit Unlocked();\\n    }\\n\\n    /**\\n     * @return a hash used to generate signature to properly call 'unlock()'\\n     */\\n    function unlockHash() public override view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    bytes1(0x19),\\n                    bytes1(0),\\n                    address(this),\\n                    _storage.nonce(),\\n                    this.unlock.selector\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x421700513f0075bfa2b5bc8d981aedce2f059c965e3a3fc7c64ff40ef1134746\",\"license\":\"MIT\"},\"contracts/wallet/mixins/Transferable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./BaseMixin.sol\\\";\\nimport \\\"./interfaces/ITransferable.sol\\\";\\nimport \\\"./interfaces/IAuthorizable.sol\\\";\\n\\nabstract contract Transferable is BaseMixin, ITransferable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    function _initialize() internal virtual {\\n        _storage.setSigningRequirements(this.transferETH.selector, true, 0);\\n        _storage.setSigningRequirements(this.transferERC20.selector, true, 0);\\n\\n        bytes4[] memory dependencies = new bytes4[](1);\\n        dependencies[0] = IAuthorizable.transferOwnership.selector;\\n        _storage.setSecurityPeriod(this.transferETH.selector, 24 hours, dependencies);\\n        _storage.setSecurityPeriod(this.transferERC20.selector, 24 hours, dependencies);\\n    }\\n\\n    /**\\n     * @notice How much an owner can spend with 0 witness\\n     *\\n     * For each signature of a witness is offered, limit is multiplied by 10\\n     */\\n    function minimumTransferLimitInUSD() public override view returns (uint256) {\\n        return _storage.minimumTransferLimitInUSD();\\n    }\\n\\n    function transferCapacityResetPeriod() public override view returns (uint256) {\\n        return _storage.transferCapacityResetPeriod();\\n    }\\n\\n    /**\\n     * @notice Transfer capacity available in USD\\n     *\\n     * 10**18 = 1 USD\\n     */\\n    function transferCapacityInUSD(uint256 numberOfWitnessSignatures)\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _storage.transferCapacityInUSD(numberOfWitnessSignatures);\\n    }\\n\\n    function cumulativeSpendingInUSD(uint256 fromTimestamp) public override view returns (uint256) {\\n        return _storage.cumulativeSpendingInUSD(fromTimestamp);\\n    }\\n\\n    /**\\n     * @notice Transfers 'value' amount of ETH to 'to'\\n     *\\n     * @param to receiver address\\n     * @param value amount of ETH\\n     */\\n    function transferETH(\\n        address payable to,\\n        uint256 value,\\n        Storage.Signatures memory signatures\\n    ) public override whenInitialized whenNotLocked {\\n        require(value <= address(this).balance, \\\"not-enough-balance\\\");\\n\\n        _ensureSecurityPeriodPassed(this.transferETH.selector);\\n        _ensureSignaturesValid(this.transferETH.selector, transferETHHash(to, value), signatures);\\n\\n        _storage.incrementNonce();\\n        _storage.updateLastExecutionTime(this.transferETH.selector);\\n\\n        _addETHSpending(value, signatures.witnesses.length);\\n        to.transfer(value);\\n\\n        emit ETHTransferred(to, value);\\n    }\\n\\n    /**\\n     * @return a hash used to generate signature to properly call 'transferETH()'\\n     */\\n    function transferETHHash(address payable to, uint256 value)\\n        public\\n        override\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    bytes1(0x19),\\n                    bytes1(0),\\n                    address(this),\\n                    _storage.nonce(),\\n                    this.transferETH.selector,\\n                    to,\\n                    value\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Transfers 'value' amount of ERC20 'token' to 'to'\\n     *\\n     * @param token ERC20 address\\n     * @param to receiver address\\n     * @param value amount of ERC20\\n     */\\n    function transferERC20(\\n        address token,\\n        address to,\\n        uint256 value,\\n        Storage.Signatures memory signatures\\n    ) public override whenInitialized whenNotLocked {\\n        require(value <= IERC20(token).balanceOf(address(this)), \\\"not-enough-balance\\\");\\n\\n        _ensureSecurityPeriodPassed(this.transferERC20.selector);\\n        _ensureSignaturesValid(\\n            this.transferERC20.selector,\\n            transferERC20Hash(token, to, value),\\n            signatures\\n        );\\n\\n        _storage.incrementNonce();\\n        _storage.updateLastExecutionTime(this.transferERC20.selector);\\n\\n        _addERC20Spending(token, value, signatures.witnesses.length);\\n        IERC20(token).safeTransfer(to, value);\\n    }\\n\\n    /**\\n     * @return a hash used to generate signature to properly call 'transferERC20()'\\n     */\\n    function transferERC20Hash(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) public override view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    bytes1(0x19),\\n                    bytes1(0),\\n                    address(this),\\n                    _storage.nonce(),\\n                    this.transferERC20.selector,\\n                    token,\\n                    to,\\n                    value\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x322a07277a9c6fabb4c3cd62894837de367a1ea015007d18ff327cf2b7262330\",\"license\":\"MIT\"},\"contracts/wallet/mixins/Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BaseMixin.sol\\\";\\nimport \\\"./interfaces/IUpgradeable.sol\\\";\\nimport \\\"../../core/interfaces/IWalletRegistry.sol\\\";\\n\\n/**\\n * @notice Implements https://eips.ethereum.org/EIPS/eip-1822\\n * EIP-1822: Universal Upgradeable Proxy Standard (UUPS)\\n */\\nabstract contract Upgradeable is BaseMixin, IUpgradeable {\\n    // keccak256(\\\"PROXIABLE\\\") = 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7\\n    bytes32\\n        private constant UUID = 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\\n\\n    function _initialize() internal virtual {\\n        _storage.setSigningRequirements(this.upgrade.selector, true, 0);\\n        _storage.setSecurityPeriod(this.upgrade.selector, 0, new bytes4[](0));\\n    }\\n\\n    function proxiableUUID() public override pure returns (bytes32) {\\n        return UUID;\\n    }\\n\\n    function implementation() public override view returns (address addr) {\\n        assembly {\\n            addr := sload(UUID)\\n        }\\n    }\\n\\n    /**\\n     * @notice Upgrades to a new implementation\\n     *\\n     * Signature of the owner required\\n     */\\n    function upgrade(address impl, Storage.Signatures memory signatures)\\n        public\\n        override\\n        whenInitialized\\n    {\\n        _ensureSignaturesValid(this.upgrade.selector, upgradeHash(impl), signatures);\\n\\n        IWalletRegistry registry = IWalletRegistry(\\n            resolveENS(keccak256(abi.encodePacked(\\\"wallet-registry-v0\\\")))\\n        );\\n        require(registry.queryWithAddress(impl) != bytes32(0), \\\"not-registered\\\");\\n        require(UUID == Upgradeable(impl).proxiableUUID(), \\\"not-upgradeable\\\");\\n\\n        _storage.incrementNonce();\\n        _storage.updateLastExecutionTime(this.upgrade.selector);\\n\\n        assembly {\\n            sstore(UUID, impl)\\n        }\\n\\n        emit Upgraded(impl);\\n    }\\n\\n    /**\\n     * @return a hash used to generate signature to properly call 'upgrade()'\\n     */\\n    function upgradeHash(address impl) public override view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    bytes1(0x19),\\n                    bytes1(0),\\n                    address(this),\\n                    _storage.nonce(),\\n                    this.upgrade.selector,\\n                    impl\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x51359f72a327308ea73177d5f1dc459bf652b52cd2b00531eba2967785f88160\",\"license\":\"MIT\"},\"contracts/wallet/mixins/interfaces/IAuthorizable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../libraries/Storage.sol\\\";\\n\\ninterface IAuthorizable {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event WitnessAdded(address indexed addr, bytes32 name);\\n    event WitnessRemoved(address indexed addr);\\n\\n    function owner() external view returns (address);\\n\\n    function witnessNames(address addr) external view returns (bytes32);\\n\\n    function witnesses(uint256 index) external view returns (address);\\n\\n    function numberOfWitnesses() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner, Storage.Signatures calldata signatures) external;\\n\\n    function transferOwnershipHash(address newOwner) external view returns (bytes32);\\n\\n    function addWitness(\\n        address ownerAddr,\\n        bytes32 ownerName,\\n        Storage.Signatures calldata signatures\\n    ) external;\\n\\n    function addWitnessHash(address ownerAddr, bytes32 ownerName) external view returns (bytes32);\\n\\n    function removeWitness(address ownerAddr, Storage.Signatures calldata signatures) external;\\n\\n    function removeWitnessHash(address ownerAddr) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x14105bc274c0beebf7e16bd36774736abcf92ce37ef069606e6f613d1a0306af\",\"license\":\"MIT\"},\"contracts/wallet/mixins/interfaces/IBaseMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../libraries/Storage.sol\\\";\\n\\ninterface IBaseMixin {\\n    event Initialized();\\n    event Spent(uint256 valueInUSD, uint256 timestamp);\\n\\n    function initialized() external view returns (bool);\\n\\n    function label() external view returns (bytes32);\\n\\n    function nonce() external view returns (uint256);\\n\\n    function signingRequirements(bytes4 methodId)\\n        external\\n        view\\n        returns (Storage.SigningRequirements memory);\\n\\n    function securityPeriod(bytes4 methodId) external view returns (Storage.SecurityPeriod memory);\\n\\n    function lastExecutionTime(bytes4 selector) external view returns (uint256);\\n\\n    function resolveENS(bytes32 subdomain) external view returns (address);\\n\\n    function isValidSignature(bytes32 hash, bytes calldata signature)\\n        external\\n        view\\n        returns (bytes4);\\n\\n    function isValidOwnerSignature(bytes32 hash, bytes calldata signature)\\n        external\\n        view\\n        returns (bool);\\n\\n    function areValidWitnessSignatures(bytes32 hash, bytes[] calldata signatures)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x8870d50701e62b0296723814ce9af860e79a5f1d7c940910db9ce7212e4e8ace\",\"license\":\"MIT\"},\"contracts/wallet/mixins/interfaces/IExecutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../libraries/Storage.sol\\\";\\n\\ninterface IExecutable {\\n    event Executed(address indexed target, uint256 value, bytes data);\\n\\n    function execute(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata data,\\n        Storage.Signatures calldata signatures\\n    ) external payable returns (bytes[] memory);\\n\\n    function executeHash(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata data\\n    ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x8323245267ad82ba461b0b36aec3e14eb44c16d312d0d7a4676dd62d970bf6cd\",\"license\":\"MIT\"},\"contracts/wallet/mixins/interfaces/ILockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../libraries/Storage.sol\\\";\\n\\ninterface ILockable {\\n    event Locked();\\n    event Unlocked();\\n\\n    function locked() external view returns (bool);\\n\\n    function lock(Storage.Signatures calldata signatures) external;\\n\\n    function lockHash() external view returns (bytes32);\\n\\n    function unlock(Storage.Signatures calldata signatures) external;\\n\\n    function unlockHash() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x32b879eb23780ca950b9ad201d745d48d740abdcb7efd25845f6137ae7f80af5\",\"license\":\"MIT\"},\"contracts/wallet/mixins/interfaces/ITransferable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../libraries/Storage.sol\\\";\\n\\ninterface ITransferable {\\n    event ETHTransferred(address indexed to, uint256 indexed value);\\n\\n    function minimumTransferLimitInUSD() external view returns (uint256);\\n\\n    function transferCapacityResetPeriod() external view returns (uint256);\\n\\n    function transferCapacityInUSD(uint256 numberOfWitnessSignatures)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function cumulativeSpendingInUSD(uint256 fromTimestamp) external view returns (uint256);\\n\\n    function transferETH(\\n        address payable to,\\n        uint256 value,\\n        Storage.Signatures calldata signatures\\n    ) external;\\n\\n    function transferETHHash(address payable to, uint256 value) external view returns (bytes32);\\n\\n    function transferERC20(\\n        address token,\\n        address to,\\n        uint256 value,\\n        Storage.Signatures calldata signatures\\n    ) external;\\n\\n    function transferERC20Hash(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7d4f74faa0c4d98678b831b777c3584f18a629c3a746f66bb1f5d4c872235db6\",\"license\":\"MIT\"},\"contracts/wallet/mixins/interfaces/IUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../libraries/Storage.sol\\\";\\n\\ninterface IUpgradeable {\\n    event Upgraded(address implementation);\\n\\n    function proxiableUUID() external pure returns (bytes32);\\n\\n    function implementation() external view returns (address addr);\\n\\n    function upgrade(address impl, Storage.Signatures calldata) external;\\n\\n    function upgradeHash(address impl) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x68de072367854e2385fb17c864a586d4c7c6e6b278d9e80cb6badf9d85feebcd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615dba80620000216000396000f3fe60806040526004361061023b5760003560e01c8063778c62061161012e578063affed0e0116100ab578063cc2f4aff1161006f578063cc2f4aff14610696578063cf309012146106b6578063d09ea903146106cb578063de3432d8146106e0578063ff6f686d146106f55761023b565b8063affed0e01461060c578063b0158bd014610621578063c3fcc90a14610641578063c60efc2414610661578063cb4774c4146106815761023b565b806398e87715116100f257806398e877151461056a578063a6de26e714610597578063a793b376146105b7578063a79b48d6146105d7578063a92df3d3146105ec5761023b565b8063778c6206146104d55780637cea91cb146104f55780637fa78497146105155780638da5cb5b146105355780638f841f991461054a5761023b565b806347332179116101bc5780635626b8fb116101805780635626b8fb1461043e5780635c60da1b1461045e57806364471e4414610480578063670a8cb7146104a05780636fee9295146104c05761023b565b806347332179146103a95780635229b0c6146103c957806352b532b4146103e957806352d1902d1461040957806355f2f6371461041e5761023b565b80631ec1a7f1116102035780631ec1a7f1146102fa5780633d23472d1461031a578063405a85f61461033c57806344eed35d14610369578063457ac616146103895761023b565b806303435619146102405780630bee279c14610276578063101c46381461028b578063158ef93e146102ab5780631626ba7e146102cd575b600080fd5b34801561024c57600080fd5b5061026061025b366004614d05565b610715565b60405161026d9190615627565b60405180910390f35b34801561028257600080fd5b506102606107e9565b34801561029757600080fd5b506102606102a6366004614ccd565b61087a565b3480156102b757600080fd5b506102c061094a565b60405161026d919061561c565b3480156102d957600080fd5b506102ed6102e8366004615059565b610953565b60405161026d9190615647565b34801561030657600080fd5b50610260610315366004614db3565b610a04565b34801561032657600080fd5b5061033a610335366004614d5d565b610ada565b005b34801561034857600080fd5b5061035c610357366004615093565b610d60565b60405161026d9190615c73565b34801561037557600080fd5b5061033a610384366004615223565b610e16565b34801561039557600080fd5b506102606103a4366004614fef565b611060565b3480156103b557600080fd5b5061033a6103c4366004615223565b6110ed565b3480156103d557600080fd5b5061033a6103e4366004614df3565b611346565b3480156103f557600080fd5b5061033a610404366004614e6e565b6115d7565b34801561041557600080fd5b5061026061183d565b61043161042c366004614f34565b61184f565b60405161026d91906155bc565b34801561044a57600080fd5b506102c0610459366004615059565b611b20565b34801561046a57600080fd5b50610473611bb6565b60405161026d9190615575565b34801561048c57600080fd5b5061026061049b366004614ebb565b611bc9565b3480156104ac57600080fd5b506104736104bb366004614fef565b611c9d565b3480156104cc57600080fd5b50610260611d2a565b3480156104e157600080fd5b506102606104f0366004614ccd565b611d65565b34801561050157600080fd5b5061033a610510366004614e6e565b611da2565b34801561052157600080fd5b50610260610530366004614fef565b61206a565b34801561054157600080fd5b506104736120a7565b34801561055657600080fd5b5061033a610565366004614d5d565b612132565b34801561057657600080fd5b5061058a610585366004615093565b612398565b60405161026d9190615c11565b3480156105a357600080fd5b506102606105b2366004615093565b6124cf565b3480156105c357600080fd5b5061033a6105d236600461513a565b61250c565b3480156105e357600080fd5b5061026061271b565b3480156105f857600080fd5b50610473610607366004614fef565b612756565b34801561061857600080fd5b506102606128d4565b34801561062d57600080fd5b5061033a61063c366004614e6e565b61290f565b34801561064d57600080fd5b506102c061065c36600461501f565b612b63565b34801561066d57600080fd5b5061026061067c366004614ccd565b612ba2565b34801561068d57600080fd5b50610260612c55565b3480156106a257600080fd5b506102606106b1366004614ccd565b612c90565b3480156106c257600080fd5b506102c0612d43565b3480156106d757600080fd5b50610260612dce565b3480156106ec57600080fd5b50610260612e9a565b34801561070157600080fd5b50610260610710366004614e5c565b612f4b565b604051631f7c8c7560e01b8152600090601960f81b908290309073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c759061075a90600390600401615627565b60206040518083038186803b15801561077257600080fd5b505af4158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa9190615007565b6040516107ca9493929190638f841f9960e01b90899089906020016153a6565b6040516020818303038152906040528051906020012090505b92915050565b6040516320be906160e21b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__906382fa41849061082490600390600401615627565b60206040518083038186803b15801561083c57600080fd5b505af4158015610850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108749190615007565b90505b90565b604051631f7c8c7560e01b8152600090601960f81b908290309073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c75906108bf90600390600401615627565b60206040518083038186803b1580156108d757600080fd5b505af41580156108eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090f9190615007565b60405161092d94939291906314ad4cad60e21b908890602001615352565b604051602081830303815290604052805190602001209050919050565b60005460ff1690565b6040516314ca1a1d60e31b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063a650d0e8906109929060039087908790600401615b72565b60206040518083038186803b1580156109aa57600080fd5b505af41580156109be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e29190614fcf565b156109f55750630b135d3f60e11b6107e3565b506001600160e01b03196107e3565b604051631f7c8c7560e01b8152600090601960f81b908290309073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c7590610a4990600390600401615627565b60206040518083038186803b158015610a6157600080fd5b505af4158015610a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a999190615007565b604051610abb9493929190632914d86360e11b908a908a908a90602001615403565b6040516020818303038152906040528051906020012090509392505050565b60005460ff16610b055760405162461bcd60e51b8152600401610afc9061575b565b60405180910390fd5b6040516334492ee160e21b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d124bb8490610b3d90600390600401615627565b60206040518083038186803b158015610b5557600080fd5b505af4158015610b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8d9190614fcf565b15610baa5760405162461bcd60e51b8152600401610afc906159be565b610bba633d23472d60e01b613000565b610bd5633d23472d60e01b610bcf8585612f4b565b83613190565b6040516382f3783960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__906382f3783990610c0d90600390600401615627565b60006040518083038186803b158015610c2557600080fd5b505af4158015610c39573d6000803e3d6000fd5b505060405163227eb6fb60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__92506344fd6df69150610c7e90600390633d23472d60e01b90600401615b9a565b60006040518083038186803b158015610c9657600080fd5b505af4158015610caa573d6000803e3d6000fd5b505060405163ce2a990160e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__925063ce2a99019150610cea9060039087908790600401615ac6565b60006040518083038186803b158015610d0257600080fd5b505af4158015610d16573d6000803e3d6000fd5b50505050826001600160a01b03167ff42817f1f41ba12a86fa57dc75ba2c8735c6ca6f089c82db9754e98387682ad583604051610d539190615627565b60405180910390a2505050565b610d68614a59565b6040516356381faf60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063ac703f5e90610da2906003908690600401615b9a565b60206040518083038186803b158015610dba57600080fd5b505af4158015610dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df29190615007565b60408051808201909152815460ff1615158152600190910154602082015292915050565b60005460ff16610e385760405162461bcd60e51b8152600401610afc9061575b565b6040516334492ee160e21b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d124bb8490610e7090600390600401615627565b60206040518083038186803b158015610e8857600080fd5b505af4158015610e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec09190614fcf565b15610edd5760405162461bcd60e51b8152600401610afc906159be565b610ef06344eed35d60e01b610bcf612dce565b6040516382f3783960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__906382f3783990610f2890600390600401615627565b60006040518083038186803b158015610f4057600080fd5b505af4158015610f54573d6000803e3d6000fd5b505060405163227eb6fb60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__92506344fd6df69150610f99906003906344eed35d60e01b90600401615b9a565b60006040518083038186803b158015610fb157600080fd5b505af4158015610fc5573d6000803e3d6000fd5b5050604051630668a84f60e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9250630668a84f915061100490600390600190600401615ae5565b60006040518083038186803b15801561101c57600080fd5b505af4158015611030573d6000803e3d6000fd5b50506040517f0f2e5b6c72c6a4491efd919a9f9a409f324ef0708c11ee57d410c2cb06c0992b925060009150a150565b604051630301bdab60e31b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063180ded589061109d906003908690600401615af5565b60206040518083038186803b1580156110b557600080fd5b505af41580156110c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e39190615007565b60005460ff1661110f5760405162461bcd60e51b8152600401610afc9061575b565b6040516334492ee160e21b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d124bb849061114790600390600401615627565b60206040518083038186803b15801561115f57600080fd5b505af4158015611173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111979190614fcf565b6111b35760405162461bcd60e51b8152600401610afc906158a0565b6111c3634733217960e01b613000565b6111d6634733217960e01b610bcf612e9a565b6040516382f3783960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__906382f378399061120e90600390600401615627565b60006040518083038186803b15801561122657600080fd5b505af415801561123a573d6000803e3d6000fd5b505060405163227eb6fb60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__92506344fd6df6915061127f90600390634733217960e01b90600401615b9a565b60006040518083038186803b15801561129757600080fd5b505af41580156112ab573d6000803e3d6000fd5b5050604051630668a84f60e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9250630668a84f91506112ea90600390600090600401615ae5565b60006040518083038186803b15801561130257600080fd5b505af4158015611316573d6000803e3d6000fd5b50506040517f19aad37188a1d3921e29eb3c66acf43d81975e107cb650d58cca878627955fd6925060009150a150565b60005460ff166113685760405162461bcd60e51b8152600401610afc9061575b565b6040516334492ee160e21b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d124bb84906113a090600390600401615627565b60206040518083038186803b1580156113b857600080fd5b505af41580156113cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f09190614fcf565b1561140d5760405162461bcd60e51b8152600401610afc906159be565b6040516370a0823160e01b81526001600160a01b038516906370a0823190611439903090600401615575565b60206040518083038186803b15801561145157600080fd5b505afa158015611465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114899190615007565b8211156114a85760405162461bcd60e51b8152600401610afc906157b2565b6114b8632914d86360e11b613000565b6114ce632914d86360e11b610bcf868686610a04565b6040516382f3783960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__906382f378399061150690600390600401615627565b60006040518083038186803b15801561151e57600080fd5b505af4158015611532573d6000803e3d6000fd5b505060405163227eb6fb60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__92506344fd6df6915061157790600390632914d86360e11b90600401615b9a565b60006040518083038186803b15801561158f57600080fd5b505af41580156115a3573d6000803e3d6000fd5b505050506115b784838360200151516133a8565b6115d16001600160a01b038516848463ffffffff61358b16565b50505050565b60005460ff166115f95760405162461bcd60e51b8152600401610afc9061575b565b6040516334492ee160e21b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d124bb849061163190600390600401615627565b60206040518083038186803b15801561164957600080fd5b505af415801561165d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116819190614fcf565b1561169e5760405162461bcd60e51b8152600401610afc906159be565b6116ae6314ad4cad60e21b613000565b6116c26314ad4cad60e21b610bcf8461087a565b6040516382f3783960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__906382f37839906116fa90600390600401615627565b60006040518083038186803b15801561171257600080fd5b505af4158015611726573d6000803e3d6000fd5b505060405163227eb6fb60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__92506344fd6df6915061176b906003906314ad4cad60e21b90600401615b9a565b60006040518083038186803b15801561178357600080fd5b505af4158015611797573d6000803e3d6000fd5b505060405163651facb960e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__925063ca3f597291506117d5906003908690600401615630565b60006040518083038186803b1580156117ed57600080fd5b505af4158015611801573d6000803e3d6000fd5b50506040516001600160a01b03851692507f8b5785dce93ca82765b1cc25cedcda1b501288cb23a1fd171c0091d83900f9bd9150600090a25050565b600080516020615d6583398151915290565b60005460609060ff166118745760405162461bcd60e51b8152600401610afc9061575b565b6040516334492ee160e21b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d124bb84906118ac90600390600401615627565b60206040518083038186803b1580156118c457600080fd5b505af41580156118d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fc9190614fcf565b156119195760405162461bcd60e51b8152600401610afc906159be565b8351855114801561192b575082518451145b6119475760405162461bcd60e51b8152600401610afc906158fb565b6119576355f2f63760e01b613000565b6119736355f2f63760e01b61196d878787611bc9565b84613190565b6040516382f3783960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__906382f37839906119ab90600390600401615627565b60006040518083038186803b1580156119c357600080fd5b505af41580156119d7573d6000803e3d6000fd5b505060405163227eb6fb60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__92506344fd6df69150611a1c906003906355f2f63760e01b90600401615b9a565b60006040518083038186803b158015611a3457600080fd5b505af4158015611a48573d6000803e3d6000fd5b50505050606085516001600160401b0381118015611a6557600080fd5b50604051908082528060200260200182016040528015611a9957816020015b6060815260200190600190039081611a845790505b50905060005b8651811015611b0c57611aed878281518110611ab757fe5b6020026020010151878381518110611acb57fe5b6020026020010151878481518110611adf57fe5b6020026020010151876135e1565b828281518110611af957fe5b6020908102919091010152600101611a9f565b50611b15613930565b90505b949350505050565b6040516314ca1a1d60e31b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063a650d0e890611b5f9060039087908790600401615b72565b60206040518083038186803b158015611b7757600080fd5b505af4158015611b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baf9190614fcf565b9392505050565b600080516020615d658339815191525490565b604051631f7c8c7560e01b8152600090601960f81b908290309073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c7590611c0e90600390600401615627565b60206040518083038186803b158015611c2657600080fd5b505af4158015611c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5e9190615007565b6355f2f63760e01b888888604051602001611c7991906155bc565b60408051601f1981840301815290829052610abb9897969594939291602001615469565b604051630fca77a560e41b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063fca77a5090611cda906003908690600401615af5565b60206040518083038186803b158015611cf257600080fd5b505af4158015611d06573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e39190614ce9565b604051630b12eeb360e31b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063589775989061082490600390600401615627565b6040516318d28ee960e01b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__906318d28ee99061109d906003908690600401615630565b60005460ff16611dc45760405162461bcd60e51b8152600401610afc9061575b565b611dd8637cea91cb60e01b610bcf84612c90565b6000611e07604051602001611dec9061553e565b60405160208183030381529060405280519060200120612756565b6040516305b07fa560e51b81529091506000906001600160a01b0383169063b60ff4a090611e39908790600401615575565b60206040518083038186803b158015611e5157600080fd5b505afa158015611e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e899190615007565b1415611ea75760405162461bcd60e51b8152600401610afc9061595f565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ee057600080fd5b505afa158015611ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f189190615007565b600080516020615d6583398151915214611f445760405162461bcd60e51b8152600401610afc9061566f565b6040516382f3783960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__906382f3783990611f7c90600390600401615627565b60006040518083038186803b158015611f9457600080fd5b505af4158015611fa8573d6000803e3d6000fd5b505060405163227eb6fb60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__92506344fd6df69150611fed90600390637cea91cb60e01b90600401615b9a565b60006040518083038186803b15801561200557600080fd5b505af4158015612019573d6000803e3d6000fd5b5050505082600080516020615d65833981519152557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8360405161205d9190615575565b60405180910390a1505050565b604051634bf2745d60e11b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__906397e4e8ba9061109d906003908690600401615af5565b6040516377cc93ed60e01b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__906377cc93ed906120e290600390600401615627565b60206040518083038186803b1580156120fa57600080fd5b505af415801561210e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108749190614ce9565b60005460ff166121545760405162461bcd60e51b8152600401610afc9061575b565b6040516334492ee160e21b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d124bb849061218c90600390600401615627565b60206040518083038186803b1580156121a457600080fd5b505af41580156121b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121dc9190614fcf565b156121f95760405162461bcd60e51b8152600401610afc906159be565b478211156122195760405162461bcd60e51b8152600401610afc906157b2565b612229638f841f9960e01b613000565b61223e638f841f9960e01b610bcf8585610715565b6040516382f3783960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__906382f378399061227690600390600401615627565b60006040518083038186803b15801561228e57600080fd5b505af41580156122a2573d6000803e3d6000fd5b505060405163227eb6fb60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__92506344fd6df691506122e790600390638f841f9960e01b90600401615b9a565b60006040518083038186803b1580156122ff57600080fd5b505af4158015612313573d6000803e3d6000fd5b5050505061232682826020015151613a1b565b6040516001600160a01b0384169083156108fc029084906000818181858888f1935050505015801561235c573d6000803e3d6000fd5b5060405182906001600160a01b038516907f1445764fe3fdfc2a9812ff42e9b65c2e7896d5162851f78f7d4a5578f7346ff190600090a3505050565b6123a0614a70565b60405163d51b48b160e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d51b48b1906123da906003908690600401615b9a565b60006040518083038186803b1580156123f257600080fd5b505af4158015612406573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261242e9190810190615007565b60405180604001604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156124bf57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116124815790505b5050505050815250509050919050565b60405163617e4be760e11b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063c2fc97ce9061109d906003908690600401615b9a565b600054610100900460ff1680612525575060005460ff16155b6125415760405162461bcd60e51b8152600401610afc906157de565b600054610100900460ff1615801561256c576000805460ff1961ff0019909116610100171660011790555b6125768686613bfb565b81518351146125975760405162461bcd60e51b8152600401610afc90615869565b60008351116125b85760405162461bcd60e51b8152600401610afc90615a8f565b604051630fce861f60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__90631f9d0c3e906125f2906003908890600401615630565b60006040518083038186803b15801561260a57600080fd5b505af415801561261e573d6000803e3d6000fd5b506000925050505b83518110156126cf57600373__$5daae515ac26c421a7f982ec8dcf175676$__63ce2a9901909186848151811061265957fe5b602002602001015186858151811061266d57fe5b60200260200101516040518463ffffffff1660e01b815260040161269393929190615ac6565b60006040518083038186803b1580156126ab57600080fd5b505af41580156126bf573d6000803e3d6000fd5b5050600190920191506126269050565b506126d8613d29565b80156126ea576000805461ff00191690555b6040517f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c890600090a1505050505050565b604051630c18a8b160e01b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__90630c18a8b19061082490600390600401615627565b60025460405163da512b2360e01b815260009182916001600160a01b039091169063da512b239061278b908690600401615627565b60206040518083038186803b1580156127a357600080fd5b505afa1580156127b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127db9190614ce9565b600254604051635f63c91960e11b81529192506001600160a01b0380841692633b3b57de929091169063bec7923290612818908890600401615627565b60206040518083038186803b15801561283057600080fd5b505afa158015612844573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128689190615007565b6040518263ffffffff1660e01b81526004016128849190615627565b60206040518083038186803b15801561289c57600080fd5b505afa1580156128b0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baf9190614ce9565b604051631f7c8c7560e01b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c759061082490600390600401615627565b60005460ff166129315760405162461bcd60e51b8152600401610afc9061575b565b612941630b0158bd60e41b613000565b612955630b0158bd60e41b610bcf84612ba2565b6040516382f3783960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__906382f378399061298d90600390600401615627565b60006040518083038186803b1580156129a557600080fd5b505af41580156129b9573d6000803e3d6000fd5b505060405163227eb6fb60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__92506344fd6df691506129fe90600390630b0158bd60e41b90600401615b9a565b60006040518083038186803b158015612a1657600080fd5b505af4158015612a2a573d6000803e3d6000fd5b50506040516377cc93ed60e01b81526000925073__$5daae515ac26c421a7f982ec8dcf175676$__91506377cc93ed90612a6990600390600401615627565b60206040518083038186803b158015612a8157600080fd5b505af4158015612a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab99190614ce9565b604051630fce861f60e11b815290915073__$5daae515ac26c421a7f982ec8dcf175676$__90631f9d0c3e90612af6906003908790600401615630565b60006040518083038186803b158015612b0e57600080fd5b505af4158015612b22573d6000803e3d6000fd5b50506040516001600160a01b038087169350841691507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6040516339a1afa160e21b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063e686be8490611b5f9060039087908790600401615b03565b604051631f7c8c7560e01b8152600090601960f81b908290309073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c7590612be790600390600401615627565b60206040518083038186803b158015612bff57600080fd5b505af4158015612c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c379190615007565b60405161092d9493929190630b0158bd60e41b908890602001615352565b60405163998c8bbb60e01b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063998c8bbb9061082490600390600401615627565b604051631f7c8c7560e01b8152600090601960f81b908290309073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c7590612cd590600390600401615627565b60206040518083038186803b158015612ced57600080fd5b505af4158015612d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d259190615007565b60405161092d9493929190637cea91cb60e01b908890602001615352565b6040516334492ee160e21b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063d124bb8490612d7e90600390600401615627565b60206040518083038186803b158015612d9657600080fd5b505af4158015612daa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108749190614fcf565b604051631f7c8c7560e01b8152600090601960f81b908290309073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c7590612e1390600390600401615627565b60206040518083038186803b158015612e2b57600080fd5b505af4158015612e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e639190615007565b604051612e7f94939291906344eed35d60e01b90602001615309565b60405160208183030381529060405280519060200120905090565b604051631f7c8c7560e01b8152600090601960f81b908290309073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c7590612edf90600390600401615627565b60206040518083038186803b158015612ef757600080fd5b505af4158015612f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2f9190615007565b604051612e7f9493929190634733217960e01b90602001615309565b604051631f7c8c7560e01b8152600090601960f81b908290309073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c7590612f9090600390600401615627565b60206040518083038186803b158015612fa857600080fd5b505af4158015612fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe09190615007565b6040516107ca9493929190633d23472d60e01b90899089906020016153a6565b60405163d51b48b160e01b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063d51b48b19061303d906003908690600401615b9a565b60006040518083038186803b15801561305557600080fd5b505af4158015613069573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526130919190810190615007565b905060005b600182015481101561318b578160000154600373__$5daae515ac26c421a7f982ec8dcf175676$__63c2fc97ce90918560010185815481106130d457fe5b90600052602060002090600891828204019190066004029054906101000a900460e01b6040518363ffffffff1660e01b8152600401613114929190615b9a565b60206040518083038186803b15801561312c57600080fd5b505af4158015613140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131649190615007565b0142116131835760405162461bcd60e51b8152600401610afc906158c4565b600101613096565b505050565b6040516356381faf60e11b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063ac703f5e906131cd906003908890600401615b9a565b60206040518083038186803b1580156131e557600080fd5b505af41580156131f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321d9190615007565b805490915060ff16156132d35781516040516314ca1a1d60e31b815273__$5daae515ac26c421a7f982ec8dcf175676$__9163a650d0e89161326791600391889190600401615b72565b60206040518083038186803b15801561327f57600080fd5b505af4158015613293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b79190614fcf565b6132d35760405162461bcd60e51b8152600401610afc90615932565b806001015482602001515110156132fc5760405162461bcd60e51b8152600401610afc90615724565b60208201516040516339a1afa160e21b815273__$5daae515ac26c421a7f982ec8dcf175676$__9163e686be849161333c91600391889190600401615b03565b60206040518083038186803b15801561335457600080fd5b505af4158015613368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338c9190614fcf565b6115d15760405162461bcd60e51b8152600401610afc906156c0565b60006133b2613d51565b6001600160a01b031663eb488a7785856040518363ffffffff1660e01b81526004016133df9291906155a3565b60206040518083038186803b1580156133f757600080fd5b505afa15801561340b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342f9190615007565b604051630301bdab60e31b815290915060009073__$5daae515ac26c421a7f982ec8dcf175676$__9063180ded589061346f906003908790600401615af5565b60206040518083038186803b15801561348757600080fd5b505af415801561349b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134bf9190615007565b9050808211156134e15760405162461bcd60e51b8152600401610afc90615a58565b604051631b45b56960e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063368b6ad29061351b906003908690600401615af5565b60006040518083038186803b15801561353357600080fd5b505af4158015613547573d6000803e3d6000fd5b505050507f999fc13182c1dc368ce43440c7fdfa39ad23e5f44ed5b242a2d2abc049d0a1f7824260405161357c929190615af5565b60405180910390a15050505050565b61318b8363a9059cbb60e01b84846040516024016135aa9291906155a3565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613d65565b6060600260015414156136065760405162461bcd60e51b8152600401610afc90615698565b60026001556001600160a01b0385166136315760405162461bcd60e51b8152600401610afc906159e6565b478411156136515760405162461bcd60e51b8152600401610afc906157b2565b846001600160a01b03167fcaf938de11c367272220bfd1d2baa99ca46665e7bc4d85f00adb51b90fe1fa9f858560405161368c929190615c8c565b60405180910390a283156136a9576136a984836020015151613a1b565b8251156138cd5760006060848060200190518101906136c891906150af565b90925090506001600160e01b0319821663a9059cbb60e01b141561374657600080828060200190518101906136fd9190614d30565b9150915061371189828860200151516133a8565b61372b6001600160a01b038a16838a63ffffffff61358b16565b60405180602001604052806000815250945050505050613924565b6001600160e01b0319821663095ea7b360e01b141561383057600080828060200190518101906137769190614d30565b9150915061378a89828860200151516133a8565b6137948983613df4565b60405163095ea7b360e01b81526001600160a01b038a169063095ea7b3906137c29085908c906004016155a3565b602060405180830381600087803b1580156137dc57600080fd5b505af11580156137f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138149190614fcf565b5060405180602001604052806000815250945050505050613924565b60006060886001600160a01b0316888860405161384d9190615509565b60006040518083038185875af1925050503d806000811461388a576040519150601f19603f3d011682016040523d82523d6000602084013e61388f565b606091505b509150915081156138a557935061392492505050565b8051156138b55780518082602001fd5b60405162461bcd60e51b8152600401610afc90615784565b6138dc84836020015151613a1b565b6040516001600160a01b0386169085156108fc029086906000818181858888f19350505050158015613912573d6000803e3d6000fd5b50506040805160208101909152600081525b60018055949350505050565b60005b600d54811015613a0c576000600d828154811061394c57fe5b6000918252602090912060029091020180546001820154604051636eb1769f60e11b81529293506001600160a01b039182169263dd62ed3e92613996923092911690600401615589565b60206040518083038186803b1580156139ae57600080fd5b505afa1580156139c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139e69190615007565b15613a035760405162461bcd60e51b8152600401610afc9061580b565b50600101613933565b50613a19600d6000614a8a565b565b6000613a25613d51565b6001600160a01b031663751c1e33846040518263ffffffff1660e01b8152600401613a509190615627565b60206040518083038186803b158015613a6857600080fd5b505afa158015613a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa09190615007565b604051630301bdab60e31b815290915060009073__$5daae515ac26c421a7f982ec8dcf175676$__9063180ded5890613ae0906003908790600401615af5565b60206040518083038186803b158015613af857600080fd5b505af4158015613b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b309190615007565b905080821115613b525760405162461bcd60e51b8152600401610afc90615a58565b604051631b45b56960e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063368b6ad290613b8c906003908690600401615af5565b60006040518083038186803b158015613ba457600080fd5b505af4158015613bb8573d6000803e3d6000fd5b505050507f999fc13182c1dc368ce43440c7fdfa39ad23e5f44ed5b242a2d2abc049d0a1f78242604051613bed929190615af5565b60405180910390a150505050565b6001600160a01b038216613c215760405162461bcd60e51b8152600401610afc906156f7565b80613c3e5760405162461bcd60e51b8152600401610afc90615842565b60018055600280546001600160a01b0319166001600160a01b038481169190911791829055604051637cdca54d60e11b815291169063f9b94a9a90613c899084903090600401615630565b600060405180830381600087803b158015613ca357600080fd5b505af1158015613cb7573d6000803e3d6000fd5b50506040516301e88e6160e71b815273__$5daae515ac26c421a7f982ec8dcf175676$__925063f44730809150613cf5906003908590600401615af5565b60006040518083038186803b158015613d0d57600080fd5b505af4158015613d21573d6000803e3d6000fd5b505050505050565b613d31613eac565b613d396142bf565b613d416143b4565b613d49614643565b613a19614842565b6000610874604051602001611dec90615525565b6060613dba826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166149529092919063ffffffff16565b80519091501561318b5780806020019051810190613dd89190614fcf565b61318b5760405162461bcd60e51b8152600401610afc90615a0e565b613e06604051602001611dec9061555c565b6001600160a01b0316816001600160a01b03161415613e2457613ea8565b600d80546001810182556000919091526002027fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5810180546001600160a01b038086166001600160a01b0319928316179092557fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb69092018054918416919092161790555b5050565b604051630b12eeb360e31b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063eced5d6990600390630b0158bd60e41b9060009083908690635897759890613efc908490600401615627565b60206040518083038186803b158015613f1457600080fd5b505af4158015613f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f4c9190615007565b60010160020281613f5957fe5b046040518563ffffffff1660e01b8152600401613f799493929190615bb2565b60006040518083038186803b158015613f9157600080fd5b505af4158015613fa5573d6000803e3d6000fd5b505060405163eced5d6960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__925063eced5d699150613ff090600390633d23472d60e01b90600190600090600401615bb2565b60006040518083038186803b15801561400857600080fd5b505af415801561401c573d6000803e3d6000fd5b505060405163eced5d6960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__925063eced5d699150614067906003906314ad4cad60e21b90600190600090600401615bb2565b60006040518083038186803b15801561407f57600080fd5b505af4158015614093573d6000803e3d6000fd5b5050604080516000808252602082019283905263d3dcb44560e01b90925273__$5daae515ac26c421a7f982ec8dcf175676$__935063d3dcb44592506140e991600391630b0158bd60e41b919060248101615bd9565b60006040518083038186803b15801561410157600080fd5b505af4158015614115573d6000803e3d6000fd5b50506040805160038082526080820190925260609350915060208201838036833701905050905063b0158bd060e01b8160008151811061415157fe5b6001600160e01b0319909216602092830291909101909101528051633d23472d60e01b908290600190811061418257fe5b6001600160e01b03199092166020928302919091019091015280516314ad4cad60e21b90829060029081106141b357fe5b6001600160e01b03199092166020928302919091019091015260405163d3dcb44560e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d3dcb4459061421490600390633d23472d60e01b9062015180908790600401615bd9565b60006040518083038186803b15801561422c57600080fd5b505af4158015614240573d6000803e3d6000fd5b505060405163d3dcb44560e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__925063d3dcb445915061428c906003906314ad4cad60e21b9062015180908790600401615bd9565b60006040518083038186803b1580156142a457600080fd5b505af41580156142b8573d6000803e3d6000fd5b5050505050565b60405163eced5d6960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063eced5d699061430690600390637cea91cb60e01b90600190600090600401615bb2565b60006040518083038186803b15801561431e57600080fd5b505af4158015614332573d6000803e3d6000fd5b5050604080516000808252602082019283905263d3dcb44560e01b90925273__$5daae515ac26c421a7f982ec8dcf175676$__935063d3dcb445925061438891600391637cea91cb60e01b919060248101615bd9565b60006040518083038186803b1580156143a057600080fd5b505af41580156115d1573d6000803e3d6000fd5b60405163eced5d6960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063eced5d69906143fb906003906344eed35d60e01b90600090600190600401615bb2565b60006040518083038186803b15801561441357600080fd5b505af4158015614427573d6000803e3d6000fd5b5050604051630b12eeb360e31b815273__$5daae515ac26c421a7f982ec8dcf175676$__925063eced5d699150600390634733217960e01b906000908390869063589775989061447b908490600401615627565b60206040518083038186803b15801561449357600080fd5b505af41580156144a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144cb9190615007565b600101600202816144d857fe5b046040518563ffffffff1660e01b81526004016144f89493929190615bb2565b60006040518083038186803b15801561451057600080fd5b505af4158015614524573d6000803e3d6000fd5b5050604080516000808252602082019283905263d3dcb44560e01b90925273__$5daae515ac26c421a7f982ec8dcf175676$__935063d3dcb445925061457a916003916344eed35d60e01b919060248101615bd9565b60006040518083038186803b15801561459257600080fd5b505af41580156145a6573d6000803e3d6000fd5b5050604080516001808252818301909252606093509150602080830190803683370190505090506344eed35d60e01b816000815181106145e257fe5b6001600160e01b03199092166020928302919091019091015260405163d3dcb44560e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d3dcb4459061428c90600390634733217960e01b9062015180908790600401615bd9565b60405163eced5d6960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063eced5d699061468a90600390638f841f9960e01b90600190600090600401615bb2565b60006040518083038186803b1580156146a257600080fd5b505af41580156146b6573d6000803e3d6000fd5b505060405163eced5d6960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__925063eced5d69915061470190600390632914d86360e11b90600190600090600401615bb2565b60006040518083038186803b15801561471957600080fd5b505af415801561472d573d6000803e3d6000fd5b50506040805160018082528183019092526060935091506020808301908036833701905050905063b0158bd060e01b8160008151811061476957fe5b6001600160e01b03199092166020928302919091019091015260405163d3dcb44560e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d3dcb445906147ca90600390638f841f9960e01b9062015180908790600401615bd9565b60006040518083038186803b1580156147e257600080fd5b505af41580156147f6573d6000803e3d6000fd5b505060405163d3dcb44560e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__925063d3dcb445915061428c90600390632914d86360e11b9062015180908790600401615bd9565b60405163eced5d6960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063eced5d6990614889906003906355f2f63760e01b90600190600090600401615bb2565b60006040518083038186803b1580156148a157600080fd5b505af41580156148b5573d6000803e3d6000fd5b50506040805160028082526060808301845294509092509060208301908036833701905050905063b0158bd060e01b816000815181106148f157fe5b6001600160e01b03199092166020928302919091019091015260405163d3dcb44560e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d3dcb4459061428c906003906355f2f63760e01b9062015180908790600401615bd9565b6060611b188484600085606061496785614a20565b6149835760405162461bcd60e51b8152600401610afc90615987565b60006060866001600160a01b031685876040516149a09190615509565b60006040518083038185875af1925050503d80600081146149dd576040519150601f19603f3d011682016040523d82523d6000602084013e6149e2565b606091505b509150915081156149f6579150611b189050565b805115614a065780518082602001fd5b8360405162461bcd60e51b8152600401610afc919061565c565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611b18575050151592915050565b604080518082019091526000808252602082015290565b604051806040016040528060008152602001606081525090565b5080546000825560020290600052602060002090810190614aab9190614aae565b50565b61087791905b80821115614adf5780546001600160a01b031990811682556001820180549091169055600201614ab4565b5090565b600082601f830112614af3578081fd5b8135614b06614b0182615ccb565b615ca5565b818152915060208083019084810181840286018201871015614b2757600080fd5b60005b84811015614b4f578135614b3d81615d39565b84529282019290820190600101614b2a565b505050505092915050565b600082601f830112614b6a578081fd5b8135614b78614b0182615ccb565b818152915060208083019084810160005b84811015614b4f57614ba0888484358a0101614c10565b84529282019290820190600101614b89565b600082601f830112614bc2578081fd5b8135614bd0614b0182615ccb565b818152915060208083019084810181840286018201871015614bf157600080fd5b60005b84811015614b4f57813584529282019290820190600101614bf4565b600082601f830112614c20578081fd5b8135614c2e614b0182615cea565b9150808252836020828501011115614c4557600080fd5b8060208401602084013760009082016020015292915050565b600060408284031215614c6f578081fd5b614c796040615ca5565b905081356001600160401b0380821115614c9257600080fd5b614c9e85838601614c10565b83526020840135915080821115614cb457600080fd5b50614cc184828501614b5a565b60208301525092915050565b600060208284031215614cde578081fd5b8135611baf81615d39565b600060208284031215614cfa578081fd5b8151611baf81615d39565b60008060408385031215614d17578081fd5b8235614d2281615d39565b946020939093013593505050565b60008060408385031215614d42578182fd5b8251614d4d81615d39565b6020939093015192949293505050565b600080600060608486031215614d71578081fd5b8335614d7c81615d39565b92506020840135915060408401356001600160401b03811115614d9d578182fd5b614da986828701614c5e565b9150509250925092565b600080600060608486031215614dc7578081fd5b8335614dd281615d39565b92506020840135614de281615d39565b929592945050506040919091013590565b60008060008060808587031215614e08578182fd5b8435614e1381615d39565b93506020850135614e2381615d39565b92506040850135915060608501356001600160401b03811115614e44578182fd5b614e5087828801614c5e565b91505092959194509250565b60008060408385031215614d17578182fd5b60008060408385031215614e80578182fd5b8235614e8b81615d39565b915060208301356001600160401b03811115614ea5578182fd5b614eb185828601614c5e565b9150509250929050565b600080600060608486031215614ecf578081fd5b83356001600160401b0380821115614ee5578283fd5b614ef187838801614ae3565b94506020860135915080821115614f06578283fd5b614f1287838801614bb2565b93506040860135915080821115614f27578283fd5b50614da986828701614b5a565b60008060008060808587031215614f49578182fd5b84356001600160401b0380821115614f5f578384fd5b614f6b88838901614ae3565b95506020870135915080821115614f80578384fd5b614f8c88838901614bb2565b94506040870135915080821115614fa1578384fd5b614fad88838901614b5a565b93506060870135915080821115614fc2578283fd5b50614e5087828801614c5e565b600060208284031215614fe0578081fd5b81518015158114611baf578182fd5b600060208284031215615000578081fd5b5035919050565b600060208284031215615018578081fd5b5051919050565b60008060408385031215615031578182fd5b8235915060208301356001600160401b0381111561504d578182fd5b614eb185828601614b5a565b6000806040838503121561506b578182fd5b8235915060208301356001600160401b03811115615087578182fd5b614eb185828601614c10565b6000602082840312156150a4578081fd5b8135611baf81615d4e565b600080604083850312156150c1578182fd5b82516150cc81615d4e565b60208401519092506001600160401b038111156150e7578182fd5b80840185601f8201126150f8578283fd5b80519150615108614b0183615cea565b82815286602084840101111561511c578384fd5b61512d836020830160208501615d0d565b8093505050509250929050565b600080600080600060a08688031215615151578283fd5b853561515c81615d39565b94506020868101359450604087013561517481615d39565b935060608701356001600160401b038082111561518f578384fd5b61519b8a838b01614ae3565b945060808901359150808211156151b0578384fd5b5080880189601f8201126151c2578384fd5b803591506151d2614b0183615ccb565b82815283810190828501858502840186018d10156151ee578687fd5b8693505b848410156152105780358352600193909301929185019185016151f2565b5080955050505050509295509295909350565b600060208284031215615234578081fd5b81356001600160401b03811115615249578182fd5b611b1884828501614c5e565b6000815180845260208085019450808401835b8381101561528e5781516001600160e01b03191687529582019590820190600101615268565b509495945050505050565b80516000906020808401835b8381101561528e578151875295820195908201906001016152a5565b600081518084526152d9816020860160208601615d0d565b601f01601f19169290920160200192915050565b600081516152ff818560208601615d0d565b9290920192915050565b6001600160f81b0319958616815293909416600184015260609190911b6001600160601b031916600283015260168201526001600160e01b0319919091166036820152603a0190565b6001600160f81b031996871681529490951660018501526001600160601b0319606093841b8116600286015260168501929092526001600160e01b031916603684015292901b909116603a820152604e0190565b6001600160f81b031997881681529590961660018601526001600160601b0319606094851b8116600287015260168601939093526001600160e01b031991909116603685015290911b16603a820152604e810191909152606e0190565b6001600160f81b031998891681529690971660018701526001600160601b0319606095861b8116600288015260168701949094526001600160e01b0319929092166036860152831b8216603a85015290911b16604e820152606281019190915260820190565b6001600160f81b031989811682528816600180830191909152606088901b6001600160601b0319166002830152601682018790526001600160e01b0319861660368301528451600091603a8401916020808901855b838110156154e25781516001600160a01b03168652948201949082019084016154be565b50505050506154fa6154f48287615299565b856152ed565b9b9a5050505050505050505050565b6000825161551b818460208701615d0d565b9190910192915050565b6c070726963652d666565642d763609c1b8152600d0190565b71077616c6c65742d72656769737472792d76360741b815260120190565b6c074782d72656c617965722d763609c1b8152600d0190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561560f57603f198886030184526155fd8583516152c1565b945092850192908501906001016155e1565b5092979650505050505050565b901515815260200190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6001600160e01b031991909116815260200190565b600060208252611baf60208301846152c1565b6020808252600f908201526e6e6f742d7570677261646561626c6560881b604082015260600190565b6020808252600e908201526d1c99595b9d1c985b9d0b58d85b1b60921b604082015260600190565b60208082526017908201527f6e6f742d7369676e65642d62792d7769746e6573736573000000000000000000604082015260600190565b602080825260139082015272696e76616c69642d656e732d6761746577617960681b604082015260600190565b60208082526018908201527f6d6f72652d7369676e6174757265732d72657175697265640000000000000000604082015260600190565b6020808252600f908201526e1b9bdd0b5a5b9a5d1a585b1a5e9959608a1b604082015260600190565b602080825260149082015273195e1d195c9b985b0b58d85b1b0b59985a5b195960621b604082015260600190565b6020808252601290820152716e6f742d656e6f7567682d62616c616e636560701b604082015260600190565b602080825260139082015272185b1c9958591e4b5a5b9a5d1a585b1a5e9959606a1b604082015260600190565b60208082526018908201527f617070726f7665642d65726332302d6e6f742d7370656e740000000000000000604082015260600190565b6020808252600d908201526c1a5b9d985b1a590b5b1858995b609a1b604082015260600190565b60208082526017908201527f646966666572656e742d706172616d2d6c656e67746873000000000000000000604082015260600190565b6020808252600a90820152691b9bdd0b5b1bd8dad95960b21b604082015260600190565b6020808252601a908201527f73656375726974792d706572696f642d6e6f742d706173736564000000000000604082015260600190565b60208082526017908201527f646966666572656e742d706172616d732d6c656e677468000000000000000000604082015260600190565b6020808252601390820152723737ba16b9b4b3b732b216b13c96b7bbb732b960691b604082015260600190565b6020808252600e908201526d1b9bdd0b5c9959da5cdd195c995960921b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252600e908201526d185b1c9958591e4b5b1bd8dad95960921b604082015260600190565b6020808252600e908201526d1a5b9d985b1a590b5d185c99d95d60921b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526017908201527f7472616e736665722d6c696d69742d6578636565646564000000000000000000604082015260600190565b6020808252601d908201527f61742d6c656173742d6f6e652d7769746e6573732d7265717569726564000000604082015260600190565b9283526001600160a01b03919091166020830152604082015260600190565b9182521515602082015260400190565b918252602082015260400190565b600060608201858352602085818501526060604085015281855180845260808601915060808382028701019350828701855b82811015615b6357607f19888703018452615b518683516152c1565b95509284019290840190600101615b35565b50939998505050505050505050565b600084825283602083015260606040830152615b9160608301846152c1565b95945050505050565b9182526001600160e01b031916602082015260400190565b9384526001600160e01b031992909216602084015215156040830152606082015260800190565b600085825263ffffffff60e01b8516602083015283604083015260806060830152615c076080830184615255565b9695505050505050565b60208082528251828201528281015160408084015280516060840181905260009291820190839060808601905b80831015615c685783516001600160e01b0319168252928401926001929092019190840190615c3e565b509695505050505050565b8151151581526020918201519181019190915260400190565b600083825260406020830152611b1860408301846152c1565b6040518181016001600160401b0381118282101715615cc357600080fd5b604052919050565b60006001600160401b03821115615ce0578081fd5b5060209081020190565b60006001600160401b03821115615cff578081fd5b50601f01601f191660200190565b60005b83811015615d28578181015183820152602001615d10565b838111156115d15750506000910152565b6001600160a01b0381168114614aab57600080fd5b6001600160e01b031981168114614aab57600080fdfec5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7a26469706673582212204f174edefdbbbcb89387339845c581d0e2e7fc8318f5dd2be5e8c02977cdbdb664736f6c63430006080033",
  "deployedBytecode": "0x60806040526004361061023b5760003560e01c8063778c62061161012e578063affed0e0116100ab578063cc2f4aff1161006f578063cc2f4aff14610696578063cf309012146106b6578063d09ea903146106cb578063de3432d8146106e0578063ff6f686d146106f55761023b565b8063affed0e01461060c578063b0158bd014610621578063c3fcc90a14610641578063c60efc2414610661578063cb4774c4146106815761023b565b806398e87715116100f257806398e877151461056a578063a6de26e714610597578063a793b376146105b7578063a79b48d6146105d7578063a92df3d3146105ec5761023b565b8063778c6206146104d55780637cea91cb146104f55780637fa78497146105155780638da5cb5b146105355780638f841f991461054a5761023b565b806347332179116101bc5780635626b8fb116101805780635626b8fb1461043e5780635c60da1b1461045e57806364471e4414610480578063670a8cb7146104a05780636fee9295146104c05761023b565b806347332179146103a95780635229b0c6146103c957806352b532b4146103e957806352d1902d1461040957806355f2f6371461041e5761023b565b80631ec1a7f1116102035780631ec1a7f1146102fa5780633d23472d1461031a578063405a85f61461033c57806344eed35d14610369578063457ac616146103895761023b565b806303435619146102405780630bee279c14610276578063101c46381461028b578063158ef93e146102ab5780631626ba7e146102cd575b600080fd5b34801561024c57600080fd5b5061026061025b366004614d05565b610715565b60405161026d9190615627565b60405180910390f35b34801561028257600080fd5b506102606107e9565b34801561029757600080fd5b506102606102a6366004614ccd565b61087a565b3480156102b757600080fd5b506102c061094a565b60405161026d919061561c565b3480156102d957600080fd5b506102ed6102e8366004615059565b610953565b60405161026d9190615647565b34801561030657600080fd5b50610260610315366004614db3565b610a04565b34801561032657600080fd5b5061033a610335366004614d5d565b610ada565b005b34801561034857600080fd5b5061035c610357366004615093565b610d60565b60405161026d9190615c73565b34801561037557600080fd5b5061033a610384366004615223565b610e16565b34801561039557600080fd5b506102606103a4366004614fef565b611060565b3480156103b557600080fd5b5061033a6103c4366004615223565b6110ed565b3480156103d557600080fd5b5061033a6103e4366004614df3565b611346565b3480156103f557600080fd5b5061033a610404366004614e6e565b6115d7565b34801561041557600080fd5b5061026061183d565b61043161042c366004614f34565b61184f565b60405161026d91906155bc565b34801561044a57600080fd5b506102c0610459366004615059565b611b20565b34801561046a57600080fd5b50610473611bb6565b60405161026d9190615575565b34801561048c57600080fd5b5061026061049b366004614ebb565b611bc9565b3480156104ac57600080fd5b506104736104bb366004614fef565b611c9d565b3480156104cc57600080fd5b50610260611d2a565b3480156104e157600080fd5b506102606104f0366004614ccd565b611d65565b34801561050157600080fd5b5061033a610510366004614e6e565b611da2565b34801561052157600080fd5b50610260610530366004614fef565b61206a565b34801561054157600080fd5b506104736120a7565b34801561055657600080fd5b5061033a610565366004614d5d565b612132565b34801561057657600080fd5b5061058a610585366004615093565b612398565b60405161026d9190615c11565b3480156105a357600080fd5b506102606105b2366004615093565b6124cf565b3480156105c357600080fd5b5061033a6105d236600461513a565b61250c565b3480156105e357600080fd5b5061026061271b565b3480156105f857600080fd5b50610473610607366004614fef565b612756565b34801561061857600080fd5b506102606128d4565b34801561062d57600080fd5b5061033a61063c366004614e6e565b61290f565b34801561064d57600080fd5b506102c061065c36600461501f565b612b63565b34801561066d57600080fd5b5061026061067c366004614ccd565b612ba2565b34801561068d57600080fd5b50610260612c55565b3480156106a257600080fd5b506102606106b1366004614ccd565b612c90565b3480156106c257600080fd5b506102c0612d43565b3480156106d757600080fd5b50610260612dce565b3480156106ec57600080fd5b50610260612e9a565b34801561070157600080fd5b50610260610710366004614e5c565b612f4b565b604051631f7c8c7560e01b8152600090601960f81b908290309073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c759061075a90600390600401615627565b60206040518083038186803b15801561077257600080fd5b505af4158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa9190615007565b6040516107ca9493929190638f841f9960e01b90899089906020016153a6565b6040516020818303038152906040528051906020012090505b92915050565b6040516320be906160e21b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__906382fa41849061082490600390600401615627565b60206040518083038186803b15801561083c57600080fd5b505af4158015610850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108749190615007565b90505b90565b604051631f7c8c7560e01b8152600090601960f81b908290309073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c75906108bf90600390600401615627565b60206040518083038186803b1580156108d757600080fd5b505af41580156108eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090f9190615007565b60405161092d94939291906314ad4cad60e21b908890602001615352565b604051602081830303815290604052805190602001209050919050565b60005460ff1690565b6040516314ca1a1d60e31b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063a650d0e8906109929060039087908790600401615b72565b60206040518083038186803b1580156109aa57600080fd5b505af41580156109be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e29190614fcf565b156109f55750630b135d3f60e11b6107e3565b506001600160e01b03196107e3565b604051631f7c8c7560e01b8152600090601960f81b908290309073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c7590610a4990600390600401615627565b60206040518083038186803b158015610a6157600080fd5b505af4158015610a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a999190615007565b604051610abb9493929190632914d86360e11b908a908a908a90602001615403565b6040516020818303038152906040528051906020012090509392505050565b60005460ff16610b055760405162461bcd60e51b8152600401610afc9061575b565b60405180910390fd5b6040516334492ee160e21b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d124bb8490610b3d90600390600401615627565b60206040518083038186803b158015610b5557600080fd5b505af4158015610b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8d9190614fcf565b15610baa5760405162461bcd60e51b8152600401610afc906159be565b610bba633d23472d60e01b613000565b610bd5633d23472d60e01b610bcf8585612f4b565b83613190565b6040516382f3783960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__906382f3783990610c0d90600390600401615627565b60006040518083038186803b158015610c2557600080fd5b505af4158015610c39573d6000803e3d6000fd5b505060405163227eb6fb60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__92506344fd6df69150610c7e90600390633d23472d60e01b90600401615b9a565b60006040518083038186803b158015610c9657600080fd5b505af4158015610caa573d6000803e3d6000fd5b505060405163ce2a990160e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__925063ce2a99019150610cea9060039087908790600401615ac6565b60006040518083038186803b158015610d0257600080fd5b505af4158015610d16573d6000803e3d6000fd5b50505050826001600160a01b03167ff42817f1f41ba12a86fa57dc75ba2c8735c6ca6f089c82db9754e98387682ad583604051610d539190615627565b60405180910390a2505050565b610d68614a59565b6040516356381faf60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063ac703f5e90610da2906003908690600401615b9a565b60206040518083038186803b158015610dba57600080fd5b505af4158015610dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df29190615007565b60408051808201909152815460ff1615158152600190910154602082015292915050565b60005460ff16610e385760405162461bcd60e51b8152600401610afc9061575b565b6040516334492ee160e21b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d124bb8490610e7090600390600401615627565b60206040518083038186803b158015610e8857600080fd5b505af4158015610e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec09190614fcf565b15610edd5760405162461bcd60e51b8152600401610afc906159be565b610ef06344eed35d60e01b610bcf612dce565b6040516382f3783960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__906382f3783990610f2890600390600401615627565b60006040518083038186803b158015610f4057600080fd5b505af4158015610f54573d6000803e3d6000fd5b505060405163227eb6fb60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__92506344fd6df69150610f99906003906344eed35d60e01b90600401615b9a565b60006040518083038186803b158015610fb157600080fd5b505af4158015610fc5573d6000803e3d6000fd5b5050604051630668a84f60e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9250630668a84f915061100490600390600190600401615ae5565b60006040518083038186803b15801561101c57600080fd5b505af4158015611030573d6000803e3d6000fd5b50506040517f0f2e5b6c72c6a4491efd919a9f9a409f324ef0708c11ee57d410c2cb06c0992b925060009150a150565b604051630301bdab60e31b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063180ded589061109d906003908690600401615af5565b60206040518083038186803b1580156110b557600080fd5b505af41580156110c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e39190615007565b60005460ff1661110f5760405162461bcd60e51b8152600401610afc9061575b565b6040516334492ee160e21b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d124bb849061114790600390600401615627565b60206040518083038186803b15801561115f57600080fd5b505af4158015611173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111979190614fcf565b6111b35760405162461bcd60e51b8152600401610afc906158a0565b6111c3634733217960e01b613000565b6111d6634733217960e01b610bcf612e9a565b6040516382f3783960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__906382f378399061120e90600390600401615627565b60006040518083038186803b15801561122657600080fd5b505af415801561123a573d6000803e3d6000fd5b505060405163227eb6fb60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__92506344fd6df6915061127f90600390634733217960e01b90600401615b9a565b60006040518083038186803b15801561129757600080fd5b505af41580156112ab573d6000803e3d6000fd5b5050604051630668a84f60e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9250630668a84f91506112ea90600390600090600401615ae5565b60006040518083038186803b15801561130257600080fd5b505af4158015611316573d6000803e3d6000fd5b50506040517f19aad37188a1d3921e29eb3c66acf43d81975e107cb650d58cca878627955fd6925060009150a150565b60005460ff166113685760405162461bcd60e51b8152600401610afc9061575b565b6040516334492ee160e21b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d124bb84906113a090600390600401615627565b60206040518083038186803b1580156113b857600080fd5b505af41580156113cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f09190614fcf565b1561140d5760405162461bcd60e51b8152600401610afc906159be565b6040516370a0823160e01b81526001600160a01b038516906370a0823190611439903090600401615575565b60206040518083038186803b15801561145157600080fd5b505afa158015611465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114899190615007565b8211156114a85760405162461bcd60e51b8152600401610afc906157b2565b6114b8632914d86360e11b613000565b6114ce632914d86360e11b610bcf868686610a04565b6040516382f3783960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__906382f378399061150690600390600401615627565b60006040518083038186803b15801561151e57600080fd5b505af4158015611532573d6000803e3d6000fd5b505060405163227eb6fb60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__92506344fd6df6915061157790600390632914d86360e11b90600401615b9a565b60006040518083038186803b15801561158f57600080fd5b505af41580156115a3573d6000803e3d6000fd5b505050506115b784838360200151516133a8565b6115d16001600160a01b038516848463ffffffff61358b16565b50505050565b60005460ff166115f95760405162461bcd60e51b8152600401610afc9061575b565b6040516334492ee160e21b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d124bb849061163190600390600401615627565b60206040518083038186803b15801561164957600080fd5b505af415801561165d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116819190614fcf565b1561169e5760405162461bcd60e51b8152600401610afc906159be565b6116ae6314ad4cad60e21b613000565b6116c26314ad4cad60e21b610bcf8461087a565b6040516382f3783960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__906382f37839906116fa90600390600401615627565b60006040518083038186803b15801561171257600080fd5b505af4158015611726573d6000803e3d6000fd5b505060405163227eb6fb60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__92506344fd6df6915061176b906003906314ad4cad60e21b90600401615b9a565b60006040518083038186803b15801561178357600080fd5b505af4158015611797573d6000803e3d6000fd5b505060405163651facb960e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__925063ca3f597291506117d5906003908690600401615630565b60006040518083038186803b1580156117ed57600080fd5b505af4158015611801573d6000803e3d6000fd5b50506040516001600160a01b03851692507f8b5785dce93ca82765b1cc25cedcda1b501288cb23a1fd171c0091d83900f9bd9150600090a25050565b600080516020615d6583398151915290565b60005460609060ff166118745760405162461bcd60e51b8152600401610afc9061575b565b6040516334492ee160e21b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d124bb84906118ac90600390600401615627565b60206040518083038186803b1580156118c457600080fd5b505af41580156118d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fc9190614fcf565b156119195760405162461bcd60e51b8152600401610afc906159be565b8351855114801561192b575082518451145b6119475760405162461bcd60e51b8152600401610afc906158fb565b6119576355f2f63760e01b613000565b6119736355f2f63760e01b61196d878787611bc9565b84613190565b6040516382f3783960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__906382f37839906119ab90600390600401615627565b60006040518083038186803b1580156119c357600080fd5b505af41580156119d7573d6000803e3d6000fd5b505060405163227eb6fb60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__92506344fd6df69150611a1c906003906355f2f63760e01b90600401615b9a565b60006040518083038186803b158015611a3457600080fd5b505af4158015611a48573d6000803e3d6000fd5b50505050606085516001600160401b0381118015611a6557600080fd5b50604051908082528060200260200182016040528015611a9957816020015b6060815260200190600190039081611a845790505b50905060005b8651811015611b0c57611aed878281518110611ab757fe5b6020026020010151878381518110611acb57fe5b6020026020010151878481518110611adf57fe5b6020026020010151876135e1565b828281518110611af957fe5b6020908102919091010152600101611a9f565b50611b15613930565b90505b949350505050565b6040516314ca1a1d60e31b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063a650d0e890611b5f9060039087908790600401615b72565b60206040518083038186803b158015611b7757600080fd5b505af4158015611b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baf9190614fcf565b9392505050565b600080516020615d658339815191525490565b604051631f7c8c7560e01b8152600090601960f81b908290309073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c7590611c0e90600390600401615627565b60206040518083038186803b158015611c2657600080fd5b505af4158015611c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5e9190615007565b6355f2f63760e01b888888604051602001611c7991906155bc565b60408051601f1981840301815290829052610abb9897969594939291602001615469565b604051630fca77a560e41b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063fca77a5090611cda906003908690600401615af5565b60206040518083038186803b158015611cf257600080fd5b505af4158015611d06573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e39190614ce9565b604051630b12eeb360e31b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063589775989061082490600390600401615627565b6040516318d28ee960e01b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__906318d28ee99061109d906003908690600401615630565b60005460ff16611dc45760405162461bcd60e51b8152600401610afc9061575b565b611dd8637cea91cb60e01b610bcf84612c90565b6000611e07604051602001611dec9061553e565b60405160208183030381529060405280519060200120612756565b6040516305b07fa560e51b81529091506000906001600160a01b0383169063b60ff4a090611e39908790600401615575565b60206040518083038186803b158015611e5157600080fd5b505afa158015611e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e899190615007565b1415611ea75760405162461bcd60e51b8152600401610afc9061595f565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ee057600080fd5b505afa158015611ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f189190615007565b600080516020615d6583398151915214611f445760405162461bcd60e51b8152600401610afc9061566f565b6040516382f3783960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__906382f3783990611f7c90600390600401615627565b60006040518083038186803b158015611f9457600080fd5b505af4158015611fa8573d6000803e3d6000fd5b505060405163227eb6fb60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__92506344fd6df69150611fed90600390637cea91cb60e01b90600401615b9a565b60006040518083038186803b15801561200557600080fd5b505af4158015612019573d6000803e3d6000fd5b5050505082600080516020615d65833981519152557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8360405161205d9190615575565b60405180910390a1505050565b604051634bf2745d60e11b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__906397e4e8ba9061109d906003908690600401615af5565b6040516377cc93ed60e01b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__906377cc93ed906120e290600390600401615627565b60206040518083038186803b1580156120fa57600080fd5b505af415801561210e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108749190614ce9565b60005460ff166121545760405162461bcd60e51b8152600401610afc9061575b565b6040516334492ee160e21b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d124bb849061218c90600390600401615627565b60206040518083038186803b1580156121a457600080fd5b505af41580156121b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121dc9190614fcf565b156121f95760405162461bcd60e51b8152600401610afc906159be565b478211156122195760405162461bcd60e51b8152600401610afc906157b2565b612229638f841f9960e01b613000565b61223e638f841f9960e01b610bcf8585610715565b6040516382f3783960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__906382f378399061227690600390600401615627565b60006040518083038186803b15801561228e57600080fd5b505af41580156122a2573d6000803e3d6000fd5b505060405163227eb6fb60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__92506344fd6df691506122e790600390638f841f9960e01b90600401615b9a565b60006040518083038186803b1580156122ff57600080fd5b505af4158015612313573d6000803e3d6000fd5b5050505061232682826020015151613a1b565b6040516001600160a01b0384169083156108fc029084906000818181858888f1935050505015801561235c573d6000803e3d6000fd5b5060405182906001600160a01b038516907f1445764fe3fdfc2a9812ff42e9b65c2e7896d5162851f78f7d4a5578f7346ff190600090a3505050565b6123a0614a70565b60405163d51b48b160e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d51b48b1906123da906003908690600401615b9a565b60006040518083038186803b1580156123f257600080fd5b505af4158015612406573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261242e9190810190615007565b60405180604001604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156124bf57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116124815790505b5050505050815250509050919050565b60405163617e4be760e11b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063c2fc97ce9061109d906003908690600401615b9a565b600054610100900460ff1680612525575060005460ff16155b6125415760405162461bcd60e51b8152600401610afc906157de565b600054610100900460ff1615801561256c576000805460ff1961ff0019909116610100171660011790555b6125768686613bfb565b81518351146125975760405162461bcd60e51b8152600401610afc90615869565b60008351116125b85760405162461bcd60e51b8152600401610afc90615a8f565b604051630fce861f60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__90631f9d0c3e906125f2906003908890600401615630565b60006040518083038186803b15801561260a57600080fd5b505af415801561261e573d6000803e3d6000fd5b506000925050505b83518110156126cf57600373__$5daae515ac26c421a7f982ec8dcf175676$__63ce2a9901909186848151811061265957fe5b602002602001015186858151811061266d57fe5b60200260200101516040518463ffffffff1660e01b815260040161269393929190615ac6565b60006040518083038186803b1580156126ab57600080fd5b505af41580156126bf573d6000803e3d6000fd5b5050600190920191506126269050565b506126d8613d29565b80156126ea576000805461ff00191690555b6040517f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c890600090a1505050505050565b604051630c18a8b160e01b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__90630c18a8b19061082490600390600401615627565b60025460405163da512b2360e01b815260009182916001600160a01b039091169063da512b239061278b908690600401615627565b60206040518083038186803b1580156127a357600080fd5b505afa1580156127b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127db9190614ce9565b600254604051635f63c91960e11b81529192506001600160a01b0380841692633b3b57de929091169063bec7923290612818908890600401615627565b60206040518083038186803b15801561283057600080fd5b505afa158015612844573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128689190615007565b6040518263ffffffff1660e01b81526004016128849190615627565b60206040518083038186803b15801561289c57600080fd5b505afa1580156128b0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baf9190614ce9565b604051631f7c8c7560e01b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c759061082490600390600401615627565b60005460ff166129315760405162461bcd60e51b8152600401610afc9061575b565b612941630b0158bd60e41b613000565b612955630b0158bd60e41b610bcf84612ba2565b6040516382f3783960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__906382f378399061298d90600390600401615627565b60006040518083038186803b1580156129a557600080fd5b505af41580156129b9573d6000803e3d6000fd5b505060405163227eb6fb60e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__92506344fd6df691506129fe90600390630b0158bd60e41b90600401615b9a565b60006040518083038186803b158015612a1657600080fd5b505af4158015612a2a573d6000803e3d6000fd5b50506040516377cc93ed60e01b81526000925073__$5daae515ac26c421a7f982ec8dcf175676$__91506377cc93ed90612a6990600390600401615627565b60206040518083038186803b158015612a8157600080fd5b505af4158015612a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab99190614ce9565b604051630fce861f60e11b815290915073__$5daae515ac26c421a7f982ec8dcf175676$__90631f9d0c3e90612af6906003908790600401615630565b60006040518083038186803b158015612b0e57600080fd5b505af4158015612b22573d6000803e3d6000fd5b50506040516001600160a01b038087169350841691507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6040516339a1afa160e21b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063e686be8490611b5f9060039087908790600401615b03565b604051631f7c8c7560e01b8152600090601960f81b908290309073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c7590612be790600390600401615627565b60206040518083038186803b158015612bff57600080fd5b505af4158015612c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c379190615007565b60405161092d9493929190630b0158bd60e41b908890602001615352565b60405163998c8bbb60e01b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063998c8bbb9061082490600390600401615627565b604051631f7c8c7560e01b8152600090601960f81b908290309073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c7590612cd590600390600401615627565b60206040518083038186803b158015612ced57600080fd5b505af4158015612d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d259190615007565b60405161092d9493929190637cea91cb60e01b908890602001615352565b6040516334492ee160e21b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063d124bb8490612d7e90600390600401615627565b60206040518083038186803b158015612d9657600080fd5b505af4158015612daa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108749190614fcf565b604051631f7c8c7560e01b8152600090601960f81b908290309073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c7590612e1390600390600401615627565b60206040518083038186803b158015612e2b57600080fd5b505af4158015612e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e639190615007565b604051612e7f94939291906344eed35d60e01b90602001615309565b60405160208183030381529060405280519060200120905090565b604051631f7c8c7560e01b8152600090601960f81b908290309073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c7590612edf90600390600401615627565b60206040518083038186803b158015612ef757600080fd5b505af4158015612f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2f9190615007565b604051612e7f9493929190634733217960e01b90602001615309565b604051631f7c8c7560e01b8152600090601960f81b908290309073__$5daae515ac26c421a7f982ec8dcf175676$__90631f7c8c7590612f9090600390600401615627565b60206040518083038186803b158015612fa857600080fd5b505af4158015612fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe09190615007565b6040516107ca9493929190633d23472d60e01b90899089906020016153a6565b60405163d51b48b160e01b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063d51b48b19061303d906003908690600401615b9a565b60006040518083038186803b15801561305557600080fd5b505af4158015613069573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526130919190810190615007565b905060005b600182015481101561318b578160000154600373__$5daae515ac26c421a7f982ec8dcf175676$__63c2fc97ce90918560010185815481106130d457fe5b90600052602060002090600891828204019190066004029054906101000a900460e01b6040518363ffffffff1660e01b8152600401613114929190615b9a565b60206040518083038186803b15801561312c57600080fd5b505af4158015613140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131649190615007565b0142116131835760405162461bcd60e51b8152600401610afc906158c4565b600101613096565b505050565b6040516356381faf60e11b815260009073__$5daae515ac26c421a7f982ec8dcf175676$__9063ac703f5e906131cd906003908890600401615b9a565b60206040518083038186803b1580156131e557600080fd5b505af41580156131f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321d9190615007565b805490915060ff16156132d35781516040516314ca1a1d60e31b815273__$5daae515ac26c421a7f982ec8dcf175676$__9163a650d0e89161326791600391889190600401615b72565b60206040518083038186803b15801561327f57600080fd5b505af4158015613293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b79190614fcf565b6132d35760405162461bcd60e51b8152600401610afc90615932565b806001015482602001515110156132fc5760405162461bcd60e51b8152600401610afc90615724565b60208201516040516339a1afa160e21b815273__$5daae515ac26c421a7f982ec8dcf175676$__9163e686be849161333c91600391889190600401615b03565b60206040518083038186803b15801561335457600080fd5b505af4158015613368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338c9190614fcf565b6115d15760405162461bcd60e51b8152600401610afc906156c0565b60006133b2613d51565b6001600160a01b031663eb488a7785856040518363ffffffff1660e01b81526004016133df9291906155a3565b60206040518083038186803b1580156133f757600080fd5b505afa15801561340b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342f9190615007565b604051630301bdab60e31b815290915060009073__$5daae515ac26c421a7f982ec8dcf175676$__9063180ded589061346f906003908790600401615af5565b60206040518083038186803b15801561348757600080fd5b505af415801561349b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134bf9190615007565b9050808211156134e15760405162461bcd60e51b8152600401610afc90615a58565b604051631b45b56960e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063368b6ad29061351b906003908690600401615af5565b60006040518083038186803b15801561353357600080fd5b505af4158015613547573d6000803e3d6000fd5b505050507f999fc13182c1dc368ce43440c7fdfa39ad23e5f44ed5b242a2d2abc049d0a1f7824260405161357c929190615af5565b60405180910390a15050505050565b61318b8363a9059cbb60e01b84846040516024016135aa9291906155a3565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613d65565b6060600260015414156136065760405162461bcd60e51b8152600401610afc90615698565b60026001556001600160a01b0385166136315760405162461bcd60e51b8152600401610afc906159e6565b478411156136515760405162461bcd60e51b8152600401610afc906157b2565b846001600160a01b03167fcaf938de11c367272220bfd1d2baa99ca46665e7bc4d85f00adb51b90fe1fa9f858560405161368c929190615c8c565b60405180910390a283156136a9576136a984836020015151613a1b565b8251156138cd5760006060848060200190518101906136c891906150af565b90925090506001600160e01b0319821663a9059cbb60e01b141561374657600080828060200190518101906136fd9190614d30565b9150915061371189828860200151516133a8565b61372b6001600160a01b038a16838a63ffffffff61358b16565b60405180602001604052806000815250945050505050613924565b6001600160e01b0319821663095ea7b360e01b141561383057600080828060200190518101906137769190614d30565b9150915061378a89828860200151516133a8565b6137948983613df4565b60405163095ea7b360e01b81526001600160a01b038a169063095ea7b3906137c29085908c906004016155a3565b602060405180830381600087803b1580156137dc57600080fd5b505af11580156137f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138149190614fcf565b5060405180602001604052806000815250945050505050613924565b60006060886001600160a01b0316888860405161384d9190615509565b60006040518083038185875af1925050503d806000811461388a576040519150601f19603f3d011682016040523d82523d6000602084013e61388f565b606091505b509150915081156138a557935061392492505050565b8051156138b55780518082602001fd5b60405162461bcd60e51b8152600401610afc90615784565b6138dc84836020015151613a1b565b6040516001600160a01b0386169085156108fc029086906000818181858888f19350505050158015613912573d6000803e3d6000fd5b50506040805160208101909152600081525b60018055949350505050565b60005b600d54811015613a0c576000600d828154811061394c57fe5b6000918252602090912060029091020180546001820154604051636eb1769f60e11b81529293506001600160a01b039182169263dd62ed3e92613996923092911690600401615589565b60206040518083038186803b1580156139ae57600080fd5b505afa1580156139c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139e69190615007565b15613a035760405162461bcd60e51b8152600401610afc9061580b565b50600101613933565b50613a19600d6000614a8a565b565b6000613a25613d51565b6001600160a01b031663751c1e33846040518263ffffffff1660e01b8152600401613a509190615627565b60206040518083038186803b158015613a6857600080fd5b505afa158015613a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa09190615007565b604051630301bdab60e31b815290915060009073__$5daae515ac26c421a7f982ec8dcf175676$__9063180ded5890613ae0906003908790600401615af5565b60206040518083038186803b158015613af857600080fd5b505af4158015613b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b309190615007565b905080821115613b525760405162461bcd60e51b8152600401610afc90615a58565b604051631b45b56960e11b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063368b6ad290613b8c906003908690600401615af5565b60006040518083038186803b158015613ba457600080fd5b505af4158015613bb8573d6000803e3d6000fd5b505050507f999fc13182c1dc368ce43440c7fdfa39ad23e5f44ed5b242a2d2abc049d0a1f78242604051613bed929190615af5565b60405180910390a150505050565b6001600160a01b038216613c215760405162461bcd60e51b8152600401610afc906156f7565b80613c3e5760405162461bcd60e51b8152600401610afc90615842565b60018055600280546001600160a01b0319166001600160a01b038481169190911791829055604051637cdca54d60e11b815291169063f9b94a9a90613c899084903090600401615630565b600060405180830381600087803b158015613ca357600080fd5b505af1158015613cb7573d6000803e3d6000fd5b50506040516301e88e6160e71b815273__$5daae515ac26c421a7f982ec8dcf175676$__925063f44730809150613cf5906003908590600401615af5565b60006040518083038186803b158015613d0d57600080fd5b505af4158015613d21573d6000803e3d6000fd5b505050505050565b613d31613eac565b613d396142bf565b613d416143b4565b613d49614643565b613a19614842565b6000610874604051602001611dec90615525565b6060613dba826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166149529092919063ffffffff16565b80519091501561318b5780806020019051810190613dd89190614fcf565b61318b5760405162461bcd60e51b8152600401610afc90615a0e565b613e06604051602001611dec9061555c565b6001600160a01b0316816001600160a01b03161415613e2457613ea8565b600d80546001810182556000919091526002027fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5810180546001600160a01b038086166001600160a01b0319928316179092557fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb69092018054918416919092161790555b5050565b604051630b12eeb360e31b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063eced5d6990600390630b0158bd60e41b9060009083908690635897759890613efc908490600401615627565b60206040518083038186803b158015613f1457600080fd5b505af4158015613f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f4c9190615007565b60010160020281613f5957fe5b046040518563ffffffff1660e01b8152600401613f799493929190615bb2565b60006040518083038186803b158015613f9157600080fd5b505af4158015613fa5573d6000803e3d6000fd5b505060405163eced5d6960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__925063eced5d699150613ff090600390633d23472d60e01b90600190600090600401615bb2565b60006040518083038186803b15801561400857600080fd5b505af415801561401c573d6000803e3d6000fd5b505060405163eced5d6960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__925063eced5d699150614067906003906314ad4cad60e21b90600190600090600401615bb2565b60006040518083038186803b15801561407f57600080fd5b505af4158015614093573d6000803e3d6000fd5b5050604080516000808252602082019283905263d3dcb44560e01b90925273__$5daae515ac26c421a7f982ec8dcf175676$__935063d3dcb44592506140e991600391630b0158bd60e41b919060248101615bd9565b60006040518083038186803b15801561410157600080fd5b505af4158015614115573d6000803e3d6000fd5b50506040805160038082526080820190925260609350915060208201838036833701905050905063b0158bd060e01b8160008151811061415157fe5b6001600160e01b0319909216602092830291909101909101528051633d23472d60e01b908290600190811061418257fe5b6001600160e01b03199092166020928302919091019091015280516314ad4cad60e21b90829060029081106141b357fe5b6001600160e01b03199092166020928302919091019091015260405163d3dcb44560e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d3dcb4459061421490600390633d23472d60e01b9062015180908790600401615bd9565b60006040518083038186803b15801561422c57600080fd5b505af4158015614240573d6000803e3d6000fd5b505060405163d3dcb44560e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__925063d3dcb445915061428c906003906314ad4cad60e21b9062015180908790600401615bd9565b60006040518083038186803b1580156142a457600080fd5b505af41580156142b8573d6000803e3d6000fd5b5050505050565b60405163eced5d6960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063eced5d699061430690600390637cea91cb60e01b90600190600090600401615bb2565b60006040518083038186803b15801561431e57600080fd5b505af4158015614332573d6000803e3d6000fd5b5050604080516000808252602082019283905263d3dcb44560e01b90925273__$5daae515ac26c421a7f982ec8dcf175676$__935063d3dcb445925061438891600391637cea91cb60e01b919060248101615bd9565b60006040518083038186803b1580156143a057600080fd5b505af41580156115d1573d6000803e3d6000fd5b60405163eced5d6960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063eced5d69906143fb906003906344eed35d60e01b90600090600190600401615bb2565b60006040518083038186803b15801561441357600080fd5b505af4158015614427573d6000803e3d6000fd5b5050604051630b12eeb360e31b815273__$5daae515ac26c421a7f982ec8dcf175676$__925063eced5d699150600390634733217960e01b906000908390869063589775989061447b908490600401615627565b60206040518083038186803b15801561449357600080fd5b505af41580156144a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144cb9190615007565b600101600202816144d857fe5b046040518563ffffffff1660e01b81526004016144f89493929190615bb2565b60006040518083038186803b15801561451057600080fd5b505af4158015614524573d6000803e3d6000fd5b5050604080516000808252602082019283905263d3dcb44560e01b90925273__$5daae515ac26c421a7f982ec8dcf175676$__935063d3dcb445925061457a916003916344eed35d60e01b919060248101615bd9565b60006040518083038186803b15801561459257600080fd5b505af41580156145a6573d6000803e3d6000fd5b5050604080516001808252818301909252606093509150602080830190803683370190505090506344eed35d60e01b816000815181106145e257fe5b6001600160e01b03199092166020928302919091019091015260405163d3dcb44560e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d3dcb4459061428c90600390634733217960e01b9062015180908790600401615bd9565b60405163eced5d6960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063eced5d699061468a90600390638f841f9960e01b90600190600090600401615bb2565b60006040518083038186803b1580156146a257600080fd5b505af41580156146b6573d6000803e3d6000fd5b505060405163eced5d6960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__925063eced5d69915061470190600390632914d86360e11b90600190600090600401615bb2565b60006040518083038186803b15801561471957600080fd5b505af415801561472d573d6000803e3d6000fd5b50506040805160018082528183019092526060935091506020808301908036833701905050905063b0158bd060e01b8160008151811061476957fe5b6001600160e01b03199092166020928302919091019091015260405163d3dcb44560e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d3dcb445906147ca90600390638f841f9960e01b9062015180908790600401615bd9565b60006040518083038186803b1580156147e257600080fd5b505af41580156147f6573d6000803e3d6000fd5b505060405163d3dcb44560e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__925063d3dcb445915061428c90600390632914d86360e11b9062015180908790600401615bd9565b60405163eced5d6960e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063eced5d6990614889906003906355f2f63760e01b90600190600090600401615bb2565b60006040518083038186803b1580156148a157600080fd5b505af41580156148b5573d6000803e3d6000fd5b50506040805160028082526060808301845294509092509060208301908036833701905050905063b0158bd060e01b816000815181106148f157fe5b6001600160e01b03199092166020928302919091019091015260405163d3dcb44560e01b815273__$5daae515ac26c421a7f982ec8dcf175676$__9063d3dcb4459061428c906003906355f2f63760e01b9062015180908790600401615bd9565b6060611b188484600085606061496785614a20565b6149835760405162461bcd60e51b8152600401610afc90615987565b60006060866001600160a01b031685876040516149a09190615509565b60006040518083038185875af1925050503d80600081146149dd576040519150601f19603f3d011682016040523d82523d6000602084013e6149e2565b606091505b509150915081156149f6579150611b189050565b805115614a065780518082602001fd5b8360405162461bcd60e51b8152600401610afc919061565c565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611b18575050151592915050565b604080518082019091526000808252602082015290565b604051806040016040528060008152602001606081525090565b5080546000825560020290600052602060002090810190614aab9190614aae565b50565b61087791905b80821115614adf5780546001600160a01b031990811682556001820180549091169055600201614ab4565b5090565b600082601f830112614af3578081fd5b8135614b06614b0182615ccb565b615ca5565b818152915060208083019084810181840286018201871015614b2757600080fd5b60005b84811015614b4f578135614b3d81615d39565b84529282019290820190600101614b2a565b505050505092915050565b600082601f830112614b6a578081fd5b8135614b78614b0182615ccb565b818152915060208083019084810160005b84811015614b4f57614ba0888484358a0101614c10565b84529282019290820190600101614b89565b600082601f830112614bc2578081fd5b8135614bd0614b0182615ccb565b818152915060208083019084810181840286018201871015614bf157600080fd5b60005b84811015614b4f57813584529282019290820190600101614bf4565b600082601f830112614c20578081fd5b8135614c2e614b0182615cea565b9150808252836020828501011115614c4557600080fd5b8060208401602084013760009082016020015292915050565b600060408284031215614c6f578081fd5b614c796040615ca5565b905081356001600160401b0380821115614c9257600080fd5b614c9e85838601614c10565b83526020840135915080821115614cb457600080fd5b50614cc184828501614b5a565b60208301525092915050565b600060208284031215614cde578081fd5b8135611baf81615d39565b600060208284031215614cfa578081fd5b8151611baf81615d39565b60008060408385031215614d17578081fd5b8235614d2281615d39565b946020939093013593505050565b60008060408385031215614d42578182fd5b8251614d4d81615d39565b6020939093015192949293505050565b600080600060608486031215614d71578081fd5b8335614d7c81615d39565b92506020840135915060408401356001600160401b03811115614d9d578182fd5b614da986828701614c5e565b9150509250925092565b600080600060608486031215614dc7578081fd5b8335614dd281615d39565b92506020840135614de281615d39565b929592945050506040919091013590565b60008060008060808587031215614e08578182fd5b8435614e1381615d39565b93506020850135614e2381615d39565b92506040850135915060608501356001600160401b03811115614e44578182fd5b614e5087828801614c5e565b91505092959194509250565b60008060408385031215614d17578182fd5b60008060408385031215614e80578182fd5b8235614e8b81615d39565b915060208301356001600160401b03811115614ea5578182fd5b614eb185828601614c5e565b9150509250929050565b600080600060608486031215614ecf578081fd5b83356001600160401b0380821115614ee5578283fd5b614ef187838801614ae3565b94506020860135915080821115614f06578283fd5b614f1287838801614bb2565b93506040860135915080821115614f27578283fd5b50614da986828701614b5a565b60008060008060808587031215614f49578182fd5b84356001600160401b0380821115614f5f578384fd5b614f6b88838901614ae3565b95506020870135915080821115614f80578384fd5b614f8c88838901614bb2565b94506040870135915080821115614fa1578384fd5b614fad88838901614b5a565b93506060870135915080821115614fc2578283fd5b50614e5087828801614c5e565b600060208284031215614fe0578081fd5b81518015158114611baf578182fd5b600060208284031215615000578081fd5b5035919050565b600060208284031215615018578081fd5b5051919050565b60008060408385031215615031578182fd5b8235915060208301356001600160401b0381111561504d578182fd5b614eb185828601614b5a565b6000806040838503121561506b578182fd5b8235915060208301356001600160401b03811115615087578182fd5b614eb185828601614c10565b6000602082840312156150a4578081fd5b8135611baf81615d4e565b600080604083850312156150c1578182fd5b82516150cc81615d4e565b60208401519092506001600160401b038111156150e7578182fd5b80840185601f8201126150f8578283fd5b80519150615108614b0183615cea565b82815286602084840101111561511c578384fd5b61512d836020830160208501615d0d565b8093505050509250929050565b600080600080600060a08688031215615151578283fd5b853561515c81615d39565b94506020868101359450604087013561517481615d39565b935060608701356001600160401b038082111561518f578384fd5b61519b8a838b01614ae3565b945060808901359150808211156151b0578384fd5b5080880189601f8201126151c2578384fd5b803591506151d2614b0183615ccb565b82815283810190828501858502840186018d10156151ee578687fd5b8693505b848410156152105780358352600193909301929185019185016151f2565b5080955050505050509295509295909350565b600060208284031215615234578081fd5b81356001600160401b03811115615249578182fd5b611b1884828501614c5e565b6000815180845260208085019450808401835b8381101561528e5781516001600160e01b03191687529582019590820190600101615268565b509495945050505050565b80516000906020808401835b8381101561528e578151875295820195908201906001016152a5565b600081518084526152d9816020860160208601615d0d565b601f01601f19169290920160200192915050565b600081516152ff818560208601615d0d565b9290920192915050565b6001600160f81b0319958616815293909416600184015260609190911b6001600160601b031916600283015260168201526001600160e01b0319919091166036820152603a0190565b6001600160f81b031996871681529490951660018501526001600160601b0319606093841b8116600286015260168501929092526001600160e01b031916603684015292901b909116603a820152604e0190565b6001600160f81b031997881681529590961660018601526001600160601b0319606094851b8116600287015260168601939093526001600160e01b031991909116603685015290911b16603a820152604e810191909152606e0190565b6001600160f81b031998891681529690971660018701526001600160601b0319606095861b8116600288015260168701949094526001600160e01b0319929092166036860152831b8216603a85015290911b16604e820152606281019190915260820190565b6001600160f81b031989811682528816600180830191909152606088901b6001600160601b0319166002830152601682018790526001600160e01b0319861660368301528451600091603a8401916020808901855b838110156154e25781516001600160a01b03168652948201949082019084016154be565b50505050506154fa6154f48287615299565b856152ed565b9b9a5050505050505050505050565b6000825161551b818460208701615d0d565b9190910192915050565b6c070726963652d666565642d763609c1b8152600d0190565b71077616c6c65742d72656769737472792d76360741b815260120190565b6c074782d72656c617965722d763609c1b8152600d0190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561560f57603f198886030184526155fd8583516152c1565b945092850192908501906001016155e1565b5092979650505050505050565b901515815260200190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6001600160e01b031991909116815260200190565b600060208252611baf60208301846152c1565b6020808252600f908201526e6e6f742d7570677261646561626c6560881b604082015260600190565b6020808252600e908201526d1c99595b9d1c985b9d0b58d85b1b60921b604082015260600190565b60208082526017908201527f6e6f742d7369676e65642d62792d7769746e6573736573000000000000000000604082015260600190565b602080825260139082015272696e76616c69642d656e732d6761746577617960681b604082015260600190565b60208082526018908201527f6d6f72652d7369676e6174757265732d72657175697265640000000000000000604082015260600190565b6020808252600f908201526e1b9bdd0b5a5b9a5d1a585b1a5e9959608a1b604082015260600190565b602080825260149082015273195e1d195c9b985b0b58d85b1b0b59985a5b195960621b604082015260600190565b6020808252601290820152716e6f742d656e6f7567682d62616c616e636560701b604082015260600190565b602080825260139082015272185b1c9958591e4b5a5b9a5d1a585b1a5e9959606a1b604082015260600190565b60208082526018908201527f617070726f7665642d65726332302d6e6f742d7370656e740000000000000000604082015260600190565b6020808252600d908201526c1a5b9d985b1a590b5b1858995b609a1b604082015260600190565b60208082526017908201527f646966666572656e742d706172616d2d6c656e67746873000000000000000000604082015260600190565b6020808252600a90820152691b9bdd0b5b1bd8dad95960b21b604082015260600190565b6020808252601a908201527f73656375726974792d706572696f642d6e6f742d706173736564000000000000604082015260600190565b60208082526017908201527f646966666572656e742d706172616d732d6c656e677468000000000000000000604082015260600190565b6020808252601390820152723737ba16b9b4b3b732b216b13c96b7bbb732b960691b604082015260600190565b6020808252600e908201526d1b9bdd0b5c9959da5cdd195c995960921b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252600e908201526d185b1c9958591e4b5b1bd8dad95960921b604082015260600190565b6020808252600e908201526d1a5b9d985b1a590b5d185c99d95d60921b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526017908201527f7472616e736665722d6c696d69742d6578636565646564000000000000000000604082015260600190565b6020808252601d908201527f61742d6c656173742d6f6e652d7769746e6573732d7265717569726564000000604082015260600190565b9283526001600160a01b03919091166020830152604082015260600190565b9182521515602082015260400190565b918252602082015260400190565b600060608201858352602085818501526060604085015281855180845260808601915060808382028701019350828701855b82811015615b6357607f19888703018452615b518683516152c1565b95509284019290840190600101615b35565b50939998505050505050505050565b600084825283602083015260606040830152615b9160608301846152c1565b95945050505050565b9182526001600160e01b031916602082015260400190565b9384526001600160e01b031992909216602084015215156040830152606082015260800190565b600085825263ffffffff60e01b8516602083015283604083015260806060830152615c076080830184615255565b9695505050505050565b60208082528251828201528281015160408084015280516060840181905260009291820190839060808601905b80831015615c685783516001600160e01b0319168252928401926001929092019190840190615c3e565b509695505050505050565b8151151581526020918201519181019190915260400190565b600083825260406020830152611b1860408301846152c1565b6040518181016001600160401b0381118282101715615cc357600080fd5b604052919050565b60006001600160401b03821115615ce0578081fd5b5060209081020190565b60006001600160401b03821115615cff578081fd5b50601f01601f191660200190565b60005b83811015615d28578181015183820152602001615d10565b838111156115d15750506000910152565b6001600160a01b0381168114614aab57600080fd5b6001600160e01b031981168114614aab57600080fdfec5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7a26469706673582212204f174edefdbbbcb89387339845c581d0e2e7fc8318f5dd2be5e8c02977cdbdb664736f6c63430006080033",
  "libraries": {
    "Storage": "0xb42169667957e5517740b7f64ab140ac857f959b"
  },
  "devdoc": {
    "methods": {
      "addWitnessHash(address,bytes32)": {
        "returns": {
          "_0": "a hash used to generate signature to properly call 'addWitness()'"
        }
      },
      "areValidWitnessSignatures(bytes32,bytes[])": {
        "params": {
          "hash": "hashed message of calling a method",
          "signatures": "signed results of hash by witnesses"
        }
      },
      "execute(address[],uint256[],bytes[],(bytes,bytes[]))": {
        "params": {
          "data": "methodID + args for each execution",
          "targets": "contract addresses to be executed for each execution",
          "values": "amount of ETH for each execution"
        }
      },
      "executeHash(address[],uint256[],bytes[])": {
        "returns": {
          "_0": "a hash used to generate signature to properly call 'execute()'"
        }
      },
      "isValidOwnerSignature(bytes32,bytes)": {
        "params": {
          "hash": "hashed message of calling a method",
          "signature": "signed result of hash by the owner"
        }
      },
      "lockHash()": {
        "returns": {
          "_0": "a hash used to generate signature to properly call 'lock()'"
        }
      },
      "removeWitnessHash(address)": {
        "returns": {
          "_0": "a hash used to generate signature to properly call 'removeWitness()'"
        }
      },
      "transferERC20(address,address,uint256,(bytes,bytes[]))": {
        "params": {
          "to": "receiver address",
          "token": "ERC20 address",
          "value": "amount of ERC20"
        }
      },
      "transferERC20Hash(address,address,uint256)": {
        "returns": {
          "_0": "a hash used to generate signature to properly call 'transferERC20()'"
        }
      },
      "transferETH(address,uint256,(bytes,bytes[]))": {
        "params": {
          "to": "receiver address",
          "value": "amount of ETH"
        }
      },
      "transferETHHash(address,uint256)": {
        "returns": {
          "_0": "a hash used to generate signature to properly call 'transferETH()'"
        }
      },
      "transferOwnershipHash(address)": {
        "returns": {
          "_0": "a hash used to generate signature to properly call 'transferOwnership()'"
        }
      },
      "unlockHash()": {
        "returns": {
          "_0": "a hash used to generate signature to properly call 'unlock()'"
        }
      },
      "upgradeHash(address)": {
        "returns": {
          "_0": "a hash used to generate signature to properly call 'upgrade()'"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "addWitness(address,bytes32,(bytes,bytes[]))": {
        "notice": "Adds a new owner     * Signatures of the owner needed"
      },
      "areValidWitnessSignatures(bytes32,bytes[])": {
        "notice": "Checks if all signatures were signed by a subset of distinct witnesses"
      },
      "execute(address[],uint256[],bytes[],(bytes,bytes[]))": {
        "notice": "Executes arbitrary contract functions If 'ERC20.approve()'s were called in the batched executions, then all the amounts of the approved tokens need to be spent by the end of the call"
      },
      "initialize(address,bytes32,address,address[],bytes32[])": {
        "notice": "Initializes the wallet"
      },
      "isValidOwnerSignature(bytes32,bytes)": {
        "notice": "Checks if the signature was signed by the owner"
      },
      "isValidSignature(bytes32,bytes)": {
        "notice": "If the signature was signed by the owner it returns 0x1626ba7e, otherwise 0xffffffff     * bytes4(keccak256(\"isValidSignature(bytes32,bytes)\") = 0x1626ba7e"
      },
      "lock((bytes,bytes[]))": {
        "notice": "Locks the wallet     * Signature of at least one of the witnesses required"
      },
      "minimumTransferLimitInUSD()": {
        "notice": "How much an owner can spend with 0 witness     * For each signature of a witness is offered, limit is multiplied by 10"
      },
      "removeWitness(address,(bytes,bytes[]))": {
        "notice": "Removes an existing owner     * Signature of the owner needed"
      },
      "transferCapacityInUSD(uint256)": {
        "notice": "Transfer capacity available in USD     * 10**18 = 1 USD"
      },
      "transferERC20(address,address,uint256,(bytes,bytes[]))": {
        "notice": "Transfers 'value' amount of ERC20 'token' to 'to'"
      },
      "transferETH(address,uint256,(bytes,bytes[]))": {
        "notice": "Transfers 'value' amount of ETH to 'to'"
      },
      "transferOwnership(address,(bytes,bytes[]))": {
        "notice": "Transfers the ownership to a new owner     * Signatures of '((n + 1) * 2) / 3' required where 'n' is the number of the witnesses"
      },
      "unlock((bytes,bytes[]))": {
        "notice": "Unlocks the wallet     * Signatures of '((n + 1) * 2) / 3' required where 'n' is the number of the witnesses Also, 24 hours needs to have passed after the lock has been called"
      },
      "upgrade(address,(bytes,bytes[]))": {
        "notice": "Upgrades to a new implementation     * Signature of the owner required"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5903,
        "contract": "contracts/wallet/Wallet.sol:Wallet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5905,
        "contract": "contracts/wallet/Wallet.sol:Wallet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5907,
        "contract": "contracts/wallet/Wallet.sol:Wallet",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5909,
        "contract": "contracts/wallet/Wallet.sol:Wallet",
        "label": "_ensGateway",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IENSGateway)2926"
      },
      {
        "astId": 5911,
        "contract": "contracts/wallet/Wallet.sol:Wallet",
        "label": "_storage",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Data)4539_storage"
      },
      {
        "astId": 6439,
        "contract": "contracts/wallet/Wallet.sol:Wallet",
        "label": "_approvals",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(ERC20Approval)6436_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes4)dyn_storage": {
        "base": "t_bytes4",
        "encoding": "dynamic_array",
        "label": "bytes4[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ERC20Approval)6436_storage)dyn_storage": {
        "base": "t_struct(ERC20Approval)6436_storage",
        "encoding": "dynamic_array",
        "label": "struct Executable.ERC20Approval[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Spending)4508_storage)dyn_storage": {
        "base": "t_struct(Spending)4508_storage",
        "encoding": "dynamic_array",
        "label": "struct Storage.Spending[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IENSGateway)2926": {
        "encoding": "inplace",
        "label": "contract IENSGateway",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes4,t_struct(SecurityPeriod)4503_storage)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => struct Storage.SecurityPeriod)",
        "numberOfBytes": "32",
        "value": "t_struct(SecurityPeriod)4503_storage"
      },
      "t_mapping(t_bytes4,t_struct(SigningRequirements)4497_storage)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => struct Storage.SigningRequirements)",
        "numberOfBytes": "32",
        "value": "t_struct(SigningRequirements)4497_storage"
      },
      "t_mapping(t_bytes4,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Data)4539_storage": {
        "encoding": "inplace",
        "label": "struct Storage.Data",
        "members": [
          {
            "astId": 4510,
            "contract": "contracts/wallet/Wallet.sol:Wallet",
            "label": "_nonce",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4514,
            "contract": "contracts/wallet/Wallet.sol:Wallet",
            "label": "_signingRequirements",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes4,t_struct(SigningRequirements)4497_storage)"
          },
          {
            "astId": 4518,
            "contract": "contracts/wallet/Wallet.sol:Wallet",
            "label": "_securityPeriods",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes4,t_struct(SecurityPeriod)4503_storage)"
          },
          {
            "astId": 4522,
            "contract": "contracts/wallet/Wallet.sol:Wallet",
            "label": "_lastExecutionTime",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes4,t_uint256)"
          },
          {
            "astId": 4524,
            "contract": "contracts/wallet/Wallet.sol:Wallet",
            "label": "_label",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 4526,
            "contract": "contracts/wallet/Wallet.sol:Wallet",
            "label": "_owner",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 4530,
            "contract": "contracts/wallet/Wallet.sol:Wallet",
            "label": "_witnessNames",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bytes32)"
          },
          {
            "astId": 4533,
            "contract": "contracts/wallet/Wallet.sol:Wallet",
            "label": "_witnesses",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4535,
            "contract": "contracts/wallet/Wallet.sol:Wallet",
            "label": "_locked",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 4538,
            "contract": "contracts/wallet/Wallet.sol:Wallet",
            "label": "_spending",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_struct(Spending)4508_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(ERC20Approval)6436_storage": {
        "encoding": "inplace",
        "label": "struct Executable.ERC20Approval",
        "members": [
          {
            "astId": 6433,
            "contract": "contracts/wallet/Wallet.sol:Wallet",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6435,
            "contract": "contracts/wallet/Wallet.sol:Wallet",
            "label": "spender",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SecurityPeriod)4503_storage": {
        "encoding": "inplace",
        "label": "struct Storage.SecurityPeriod",
        "members": [
          {
            "astId": 4499,
            "contract": "contracts/wallet/Wallet.sol:Wallet",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4502,
            "contract": "contracts/wallet/Wallet.sol:Wallet",
            "label": "dependencies",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes4)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SigningRequirements)4497_storage": {
        "encoding": "inplace",
        "label": "struct Storage.SigningRequirements",
        "members": [
          {
            "astId": 4494,
            "contract": "contracts/wallet/Wallet.sol:Wallet",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4496,
            "contract": "contracts/wallet/Wallet.sol:Wallet",
            "label": "witnesses",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Spending)4508_storage": {
        "encoding": "inplace",
        "label": "struct Storage.Spending",
        "members": [
          {
            "astId": 4505,
            "contract": "contracts/wallet/Wallet.sol:Wallet",
            "label": "valueInUSD",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4507,
            "contract": "contracts/wallet/Wallet.sol:Wallet",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "4798800",
      "executionCost": "5649",
      "totalCost": "4804449"
    },
    "external": {
      "addWitness(address,bytes32,(bytes,bytes[]))": "infinite",
      "addWitnessHash(address,bytes32)": "infinite",
      "areValidWitnessSignatures(bytes32,bytes[])": "infinite",
      "cumulativeSpendingInUSD(uint256)": "infinite",
      "execute(address[],uint256[],bytes[],(bytes,bytes[]))": "infinite",
      "executeHash(address[],uint256[],bytes[])": "infinite",
      "implementation()": "infinite",
      "initialize(address,bytes32,address,address[],bytes32[])": "infinite",
      "initialized()": "1153",
      "isValidOwnerSignature(bytes32,bytes)": "infinite",
      "isValidSignature(bytes32,bytes)": "infinite",
      "label()": "infinite",
      "lastExecutionTime(bytes4)": "infinite",
      "lock((bytes,bytes[]))": "infinite",
      "lockHash()": "infinite",
      "locked()": "infinite",
      "minimumTransferLimitInUSD()": "infinite",
      "nonce()": "infinite",
      "numberOfWitnesses()": "infinite",
      "owner()": "infinite",
      "proxiableUUID()": "infinite",
      "removeWitness(address,(bytes,bytes[]))": "infinite",
      "removeWitnessHash(address)": "infinite",
      "resolveENS(bytes32)": "infinite",
      "securityPeriod(bytes4)": "infinite",
      "signingRequirements(bytes4)": "infinite",
      "transferCapacityInUSD(uint256)": "infinite",
      "transferCapacityResetPeriod()": "infinite",
      "transferERC20(address,address,uint256,(bytes,bytes[]))": "infinite",
      "transferERC20Hash(address,address,uint256)": "infinite",
      "transferETH(address,uint256,(bytes,bytes[]))": "infinite",
      "transferETHHash(address,uint256)": "infinite",
      "transferOwnership(address,(bytes,bytes[]))": "infinite",
      "transferOwnershipHash(address)": "infinite",
      "unlock((bytes,bytes[]))": "infinite",
      "unlockHash()": "infinite",
      "upgrade(address,(bytes,bytes[]))": "infinite",
      "upgradeHash(address)": "infinite",
      "witnessNames(address)": "infinite",
      "witnesses(uint256)": "infinite"
    },
    "internal": {
      "_initialize()": "infinite"
    }
  }
}